//===----------------------------------------------------------------------===//
//
//                         DuckDB
//
// go_duckdb_extension.h
//
//
//===----------------------------------------------------------------------===//
//
// !!!!!!!
// WARNING: this file is autogenerated by scripts/generate_go_api.py, manual changes will be overwritten
// !!!!!!!

#include "duckdb.h"
//===--------------------------------------------------------------------===//
// Function pointer struct
//===--------------------------------------------------------------------===//
typedef struct {
	duckdb_state (*duckdb_open)(const char *path, duckdb_database *out_database);
	duckdb_state (*duckdb_open_ext)(const char *path, duckdb_database *out_database, duckdb_config config,
	                                char **out_error);
	void (*duckdb_close)(duckdb_database *database);
	duckdb_state (*duckdb_connect)(duckdb_database database, duckdb_connection *out_connection);
	void (*duckdb_interrupt)(duckdb_connection connection);
	duckdb_query_progress_type (*duckdb_query_progress)(duckdb_connection connection);
	void (*duckdb_disconnect)(duckdb_connection *connection);
	const char *(*duckdb_library_version)();
	duckdb_state (*duckdb_create_config)(duckdb_config *out_config);
	size_t (*duckdb_config_count)();
	duckdb_state (*duckdb_get_config_flag)(size_t index, const char **out_name, const char **out_description);
	duckdb_state (*duckdb_set_config)(duckdb_config config, const char *name, const char *option);
	void (*duckdb_destroy_config)(duckdb_config *config);
	duckdb_state (*duckdb_query)(duckdb_connection connection, const char *query, duckdb_result *out_result);
	void (*duckdb_destroy_result)(duckdb_result *result);
	const char *(*duckdb_column_name)(duckdb_result *result, idx_t col);
	duckdb_type (*duckdb_column_type)(duckdb_result *result, idx_t col);
	duckdb_statement_type (*duckdb_result_statement_type)(duckdb_result result);
	duckdb_logical_type (*duckdb_column_logical_type)(duckdb_result *result, idx_t col);
	idx_t (*duckdb_column_count)(duckdb_result *result);
	idx_t (*duckdb_rows_changed)(duckdb_result *result);
	const char *(*duckdb_result_error)(duckdb_result *result);
	void *(*duckdb_malloc)(size_t size);
	void (*duckdb_free)(void *ptr);
	idx_t (*duckdb_vector_size)();
	bool (*duckdb_string_is_inlined)(duckdb_string_t string);
	duckdb_date_struct (*duckdb_from_date)(duckdb_date date);
	duckdb_date (*duckdb_to_date)(duckdb_date_struct date);
	bool (*duckdb_is_finite_date)(duckdb_date date);
	duckdb_time_struct (*duckdb_from_time)(duckdb_time time);
	duckdb_time_tz (*duckdb_create_time_tz)(int64_t micros, int32_t offset);
	duckdb_time_tz_struct (*duckdb_from_time_tz)(duckdb_time_tz micros);
	duckdb_time (*duckdb_to_time)(duckdb_time_struct time);
	duckdb_timestamp_struct (*duckdb_from_timestamp)(duckdb_timestamp ts);
	duckdb_timestamp (*duckdb_to_timestamp)(duckdb_timestamp_struct ts);
	bool (*duckdb_is_finite_timestamp)(duckdb_timestamp ts);
	double (*duckdb_hugeint_to_double)(duckdb_hugeint val);
	duckdb_hugeint (*duckdb_double_to_hugeint)(double val);
	double (*duckdb_uhugeint_to_double)(duckdb_uhugeint val);
	duckdb_uhugeint (*duckdb_double_to_uhugeint)(double val);
	duckdb_decimal (*duckdb_double_to_decimal)(double val, uint8_t width, uint8_t scale);
	double (*duckdb_decimal_to_double)(duckdb_decimal val);
	duckdb_state (*duckdb_prepare)(duckdb_connection connection, const char *query,
	                               duckdb_prepared_statement *out_prepared_statement);
	void (*duckdb_destroy_prepare)(duckdb_prepared_statement *prepared_statement);
	const char *(*duckdb_prepare_error)(duckdb_prepared_statement prepared_statement);
	idx_t (*duckdb_nparams)(duckdb_prepared_statement prepared_statement);
	const char *(*duckdb_parameter_name)(duckdb_prepared_statement prepared_statement, idx_t index);
	duckdb_type (*duckdb_param_type)(duckdb_prepared_statement prepared_statement, idx_t param_idx);
	duckdb_state (*duckdb_clear_bindings)(duckdb_prepared_statement prepared_statement);
	duckdb_statement_type (*duckdb_prepared_statement_type)(duckdb_prepared_statement statement);
	duckdb_state (*duckdb_bind_value)(duckdb_prepared_statement prepared_statement, idx_t param_idx, duckdb_value val);
	duckdb_state (*duckdb_bind_parameter_index)(duckdb_prepared_statement prepared_statement, idx_t *param_idx_out,
	                                            const char *name);
	duckdb_state (*duckdb_bind_boolean)(duckdb_prepared_statement prepared_statement, idx_t param_idx, bool val);
	duckdb_state (*duckdb_bind_int8)(duckdb_prepared_statement prepared_statement, idx_t param_idx, int8_t val);
	duckdb_state (*duckdb_bind_int16)(duckdb_prepared_statement prepared_statement, idx_t param_idx, int16_t val);
	duckdb_state (*duckdb_bind_int32)(duckdb_prepared_statement prepared_statement, idx_t param_idx, int32_t val);
	duckdb_state (*duckdb_bind_int64)(duckdb_prepared_statement prepared_statement, idx_t param_idx, int64_t val);
	duckdb_state (*duckdb_bind_hugeint)(duckdb_prepared_statement prepared_statement, idx_t param_idx,
	                                    duckdb_hugeint val);
	duckdb_state (*duckdb_bind_uhugeint)(duckdb_prepared_statement prepared_statement, idx_t param_idx,
	                                     duckdb_uhugeint val);
	duckdb_state (*duckdb_bind_decimal)(duckdb_prepared_statement prepared_statement, idx_t param_idx,
	                                    duckdb_decimal val);
	duckdb_state (*duckdb_bind_uint8)(duckdb_prepared_statement prepared_statement, idx_t param_idx, uint8_t val);
	duckdb_state (*duckdb_bind_uint16)(duckdb_prepared_statement prepared_statement, idx_t param_idx, uint16_t val);
	duckdb_state (*duckdb_bind_uint32)(duckdb_prepared_statement prepared_statement, idx_t param_idx, uint32_t val);
	duckdb_state (*duckdb_bind_uint64)(duckdb_prepared_statement prepared_statement, idx_t param_idx, uint64_t val);
	duckdb_state (*duckdb_bind_float)(duckdb_prepared_statement prepared_statement, idx_t param_idx, float val);
	duckdb_state (*duckdb_bind_double)(duckdb_prepared_statement prepared_statement, idx_t param_idx, double val);
	duckdb_state (*duckdb_bind_date)(duckdb_prepared_statement prepared_statement, idx_t param_idx, duckdb_date val);
	duckdb_state (*duckdb_bind_time)(duckdb_prepared_statement prepared_statement, idx_t param_idx, duckdb_time val);
	duckdb_state (*duckdb_bind_timestamp)(duckdb_prepared_statement prepared_statement, idx_t param_idx,
	                                      duckdb_timestamp val);
	duckdb_state (*duckdb_bind_timestamp_tz)(duckdb_prepared_statement prepared_statement, idx_t param_idx,
	                                         duckdb_timestamp val);
	duckdb_state (*duckdb_bind_interval)(duckdb_prepared_statement prepared_statement, idx_t param_idx,
	                                     duckdb_interval val);
	duckdb_state (*duckdb_bind_varchar)(duckdb_prepared_statement prepared_statement, idx_t param_idx, const char *val);
	duckdb_state (*duckdb_bind_varchar_length)(duckdb_prepared_statement prepared_statement, idx_t param_idx,
	                                           const char *val, idx_t length);
	duckdb_state (*duckdb_bind_blob)(duckdb_prepared_statement prepared_statement, idx_t param_idx, const void *data,
	                                 idx_t length);
	duckdb_state (*duckdb_bind_null)(duckdb_prepared_statement prepared_statement, idx_t param_idx);
	duckdb_state (*duckdb_execute_prepared)(duckdb_prepared_statement prepared_statement, duckdb_result *out_result);
	idx_t (*duckdb_extract_statements)(duckdb_connection connection, const char *query,
	                                   duckdb_extracted_statements *out_extracted_statements);
	duckdb_state (*duckdb_prepare_extracted_statement)(duckdb_connection connection,
	                                                   duckdb_extracted_statements extracted_statements, idx_t index,
	                                                   duckdb_prepared_statement *out_prepared_statement);
	const char *(*duckdb_extract_statements_error)(duckdb_extracted_statements extracted_statements);
	void (*duckdb_destroy_extracted)(duckdb_extracted_statements *extracted_statements);
	duckdb_state (*duckdb_pending_prepared)(duckdb_prepared_statement prepared_statement,
	                                        duckdb_pending_result *out_result);
	void (*duckdb_destroy_pending)(duckdb_pending_result *pending_result);
	const char *(*duckdb_pending_error)(duckdb_pending_result pending_result);
	duckdb_pending_state (*duckdb_pending_execute_task)(duckdb_pending_result pending_result);
	duckdb_pending_state (*duckdb_pending_execute_check_state)(duckdb_pending_result pending_result);
	duckdb_state (*duckdb_execute_pending)(duckdb_pending_result pending_result, duckdb_result *out_result);
	bool (*duckdb_pending_execution_is_finished)(duckdb_pending_state pending_state);
	void (*duckdb_destroy_value)(duckdb_value *value);
	duckdb_value (*duckdb_create_varchar)(const char *text);
	duckdb_value (*duckdb_create_varchar_length)(const char *text, idx_t length);
	duckdb_value (*duckdb_create_int64)(int64_t val);
	duckdb_value (*duckdb_create_struct_value)(duckdb_logical_type type, duckdb_value *values);
	duckdb_value (*duckdb_create_list_value)(duckdb_logical_type type, duckdb_value *values, idx_t value_count);
	duckdb_value (*duckdb_create_array_value)(duckdb_logical_type type, duckdb_value *values, idx_t value_count);
	char *(*duckdb_get_varchar)(duckdb_value value);
	int64_t (*duckdb_get_int64)(duckdb_value val);
	duckdb_logical_type (*duckdb_create_logical_type)(duckdb_type type);
	char *(*duckdb_logical_type_get_alias)(duckdb_logical_type type);
	duckdb_logical_type (*duckdb_create_list_type)(duckdb_logical_type type);
	duckdb_logical_type (*duckdb_create_array_type)(duckdb_logical_type type, idx_t array_size);
	duckdb_logical_type (*duckdb_create_map_type)(duckdb_logical_type key_type, duckdb_logical_type value_type);
	duckdb_logical_type (*duckdb_create_union_type)(duckdb_logical_type *member_types, const char **member_names,
	                                                idx_t member_count);
	duckdb_logical_type (*duckdb_create_struct_type)(duckdb_logical_type *member_types, const char **member_names,
	                                                 idx_t member_count);
	duckdb_logical_type (*duckdb_create_enum_type)(const char **member_names, idx_t member_count);
	duckdb_logical_type (*duckdb_create_decimal_type)(uint8_t width, uint8_t scale);
	duckdb_type (*duckdb_get_type_id)(duckdb_logical_type type);
	uint8_t (*duckdb_decimal_width)(duckdb_logical_type type);
	uint8_t (*duckdb_decimal_scale)(duckdb_logical_type type);
	duckdb_type (*duckdb_decimal_internal_type)(duckdb_logical_type type);
	duckdb_type (*duckdb_enum_internal_type)(duckdb_logical_type type);
	uint32_t (*duckdb_enum_dictionary_size)(duckdb_logical_type type);
	char *(*duckdb_enum_dictionary_value)(duckdb_logical_type type, idx_t index);
	duckdb_logical_type (*duckdb_list_type_child_type)(duckdb_logical_type type);
	duckdb_logical_type (*duckdb_array_type_child_type)(duckdb_logical_type type);
	idx_t (*duckdb_array_type_array_size)(duckdb_logical_type type);
	duckdb_logical_type (*duckdb_map_type_key_type)(duckdb_logical_type type);
	duckdb_logical_type (*duckdb_map_type_value_type)(duckdb_logical_type type);
	idx_t (*duckdb_struct_type_child_count)(duckdb_logical_type type);
	char *(*duckdb_struct_type_child_name)(duckdb_logical_type type, idx_t index);
	duckdb_logical_type (*duckdb_struct_type_child_type)(duckdb_logical_type type, idx_t index);
	idx_t (*duckdb_union_type_member_count)(duckdb_logical_type type);
	char *(*duckdb_union_type_member_name)(duckdb_logical_type type, idx_t index);
	duckdb_logical_type (*duckdb_union_type_member_type)(duckdb_logical_type type, idx_t index);
	void (*duckdb_destroy_logical_type)(duckdb_logical_type *type);
	duckdb_data_chunk (*duckdb_fetch_chunk)(duckdb_result result);
	duckdb_data_chunk (*duckdb_create_data_chunk)(duckdb_logical_type *types, idx_t column_count);
	void (*duckdb_destroy_data_chunk)(duckdb_data_chunk *chunk);
	void (*duckdb_data_chunk_reset)(duckdb_data_chunk chunk);
	idx_t (*duckdb_data_chunk_get_column_count)(duckdb_data_chunk chunk);
	duckdb_vector (*duckdb_data_chunk_get_vector)(duckdb_data_chunk chunk, idx_t col_idx);
	idx_t (*duckdb_data_chunk_get_size)(duckdb_data_chunk chunk);
	void (*duckdb_data_chunk_set_size)(duckdb_data_chunk chunk, idx_t size);
	duckdb_logical_type (*duckdb_vector_get_column_type)(duckdb_vector vector);
	void *(*duckdb_vector_get_data)(duckdb_vector vector);
	uint64_t *(*duckdb_vector_get_validity)(duckdb_vector vector);
	void (*duckdb_vector_ensure_validity_writable)(duckdb_vector vector);
	void (*duckdb_vector_assign_string_element)(duckdb_vector vector, idx_t index, const char *str);
	void (*duckdb_vector_assign_string_element_len)(duckdb_vector vector, idx_t index, const char *str, idx_t str_len);
	duckdb_vector (*duckdb_list_vector_get_child)(duckdb_vector vector);
	idx_t (*duckdb_list_vector_get_size)(duckdb_vector vector);
	duckdb_state (*duckdb_list_vector_set_size)(duckdb_vector vector, idx_t size);
	duckdb_state (*duckdb_list_vector_reserve)(duckdb_vector vector, idx_t required_capacity);
	duckdb_vector (*duckdb_struct_vector_get_child)(duckdb_vector vector, idx_t index);
	duckdb_vector (*duckdb_array_vector_get_child)(duckdb_vector vector);
	bool (*duckdb_validity_row_is_valid)(uint64_t *validity, idx_t row);
	void (*duckdb_validity_set_row_validity)(uint64_t *validity, idx_t row, bool valid);
	void (*duckdb_validity_set_row_invalid)(uint64_t *validity, idx_t row);
	void (*duckdb_validity_set_row_valid)(uint64_t *validity, idx_t row);
	duckdb_scalar_function (*duckdb_create_scalar_function)();
	void (*duckdb_destroy_scalar_function)(duckdb_scalar_function *scalar_function);
	void (*duckdb_scalar_function_set_name)(duckdb_scalar_function scalar_function, const char *name);
	void (*duckdb_scalar_function_add_parameter)(duckdb_scalar_function scalar_function, duckdb_logical_type type);
	void (*duckdb_scalar_function_set_return_type)(duckdb_scalar_function scalar_function, duckdb_logical_type type);
	void (*duckdb_scalar_function_set_extra_info)(duckdb_scalar_function scalar_function, void *extra_info,
	                                              duckdb_delete_callback_t destroy);
	void (*duckdb_scalar_function_set_function)(duckdb_scalar_function scalar_function,
	                                            duckdb_scalar_function_t function);
	duckdb_state (*duckdb_register_scalar_function)(duckdb_connection con, duckdb_scalar_function scalar_function);
	duckdb_table_function (*duckdb_create_table_function)();
	void (*duckdb_destroy_table_function)(duckdb_table_function *table_function);
	void (*duckdb_table_function_set_name)(duckdb_table_function table_function, const char *name);
	void (*duckdb_table_function_add_parameter)(duckdb_table_function table_function, duckdb_logical_type type);
	void (*duckdb_table_function_add_named_parameter)(duckdb_table_function table_function, const char *name,
	                                                  duckdb_logical_type type);
	void (*duckdb_table_function_set_extra_info)(duckdb_table_function table_function, void *extra_info,
	                                             duckdb_delete_callback_t destroy);
	void (*duckdb_table_function_set_bind)(duckdb_table_function table_function, duckdb_table_function_bind_t bind);
	void (*duckdb_table_function_set_init)(duckdb_table_function table_function, duckdb_table_function_init_t init);
	void (*duckdb_table_function_set_local_init)(duckdb_table_function table_function,
	                                             duckdb_table_function_init_t init);
	void (*duckdb_table_function_set_function)(duckdb_table_function table_function, duckdb_table_function_t function);
	void (*duckdb_table_function_supports_projection_pushdown)(duckdb_table_function table_function, bool pushdown);
	duckdb_state (*duckdb_register_table_function)(duckdb_connection con, duckdb_table_function function);
	void *(*duckdb_bind_get_extra_info)(duckdb_bind_info info);
	void (*duckdb_bind_add_result_column)(duckdb_bind_info info, const char *name, duckdb_logical_type type);
	idx_t (*duckdb_bind_get_parameter_count)(duckdb_bind_info info);
	duckdb_value (*duckdb_bind_get_parameter)(duckdb_bind_info info, idx_t index);
	duckdb_value (*duckdb_bind_get_named_parameter)(duckdb_bind_info info, const char *name);
	void (*duckdb_bind_set_bind_data)(duckdb_bind_info info, void *bind_data, duckdb_delete_callback_t destroy);
	void (*duckdb_bind_set_cardinality)(duckdb_bind_info info, idx_t cardinality, bool is_exact);
	void (*duckdb_bind_set_error)(duckdb_bind_info info, const char *error);
	void *(*duckdb_init_get_extra_info)(duckdb_init_info info);
	void *(*duckdb_init_get_bind_data)(duckdb_init_info info);
	void (*duckdb_init_set_init_data)(duckdb_init_info info, void *init_data, duckdb_delete_callback_t destroy);
	idx_t (*duckdb_init_get_column_count)(duckdb_init_info info);
	idx_t (*duckdb_init_get_column_index)(duckdb_init_info info, idx_t column_index);
	void (*duckdb_init_set_max_threads)(duckdb_init_info info, idx_t max_threads);
	void (*duckdb_init_set_error)(duckdb_init_info info, const char *error);
	void *(*duckdb_function_get_extra_info)(duckdb_function_info info);
	void *(*duckdb_function_get_bind_data)(duckdb_function_info info);
	void *(*duckdb_function_get_init_data)(duckdb_function_info info);
	void *(*duckdb_function_get_local_init_data)(duckdb_function_info info);
	void (*duckdb_function_set_error)(duckdb_function_info info, const char *error);
	void (*duckdb_add_replacement_scan)(duckdb_database db, duckdb_replacement_callback_t replacement, void *extra_data,
	                                    duckdb_delete_callback_t delete_callback);
	void (*duckdb_replacement_scan_set_function_name)(duckdb_replacement_scan_info info, const char *function_name);
	void (*duckdb_replacement_scan_add_parameter)(duckdb_replacement_scan_info info, duckdb_value parameter);
	void (*duckdb_replacement_scan_set_error)(duckdb_replacement_scan_info info, const char *error);
	duckdb_state (*duckdb_appender_create)(duckdb_connection connection, const char *schema, const char *table,
	                                       duckdb_appender *out_appender);
	idx_t (*duckdb_appender_column_count)(duckdb_appender appender);
	duckdb_logical_type (*duckdb_appender_column_type)(duckdb_appender appender, idx_t col_idx);
	const char *(*duckdb_appender_error)(duckdb_appender appender);
	duckdb_state (*duckdb_appender_flush)(duckdb_appender appender);
	duckdb_state (*duckdb_appender_close)(duckdb_appender appender);
	duckdb_state (*duckdb_appender_destroy)(duckdb_appender *appender);
	duckdb_state (*duckdb_appender_begin_row)(duckdb_appender appender);
	duckdb_state (*duckdb_appender_end_row)(duckdb_appender appender);
	duckdb_state (*duckdb_append_default)(duckdb_appender appender);
	duckdb_state (*duckdb_append_bool)(duckdb_appender appender, bool value);
	duckdb_state (*duckdb_append_int8)(duckdb_appender appender, int8_t value);
	duckdb_state (*duckdb_append_int16)(duckdb_appender appender, int16_t value);
	duckdb_state (*duckdb_append_int32)(duckdb_appender appender, int32_t value);
	duckdb_state (*duckdb_append_int64)(duckdb_appender appender, int64_t value);
	duckdb_state (*duckdb_append_hugeint)(duckdb_appender appender, duckdb_hugeint value);
	duckdb_state (*duckdb_append_uint8)(duckdb_appender appender, uint8_t value);
	duckdb_state (*duckdb_append_uint16)(duckdb_appender appender, uint16_t value);
	duckdb_state (*duckdb_append_uint32)(duckdb_appender appender, uint32_t value);
	duckdb_state (*duckdb_append_uint64)(duckdb_appender appender, uint64_t value);
	duckdb_state (*duckdb_append_uhugeint)(duckdb_appender appender, duckdb_uhugeint value);
	duckdb_state (*duckdb_append_float)(duckdb_appender appender, float value);
	duckdb_state (*duckdb_append_double)(duckdb_appender appender, double value);
	duckdb_state (*duckdb_append_date)(duckdb_appender appender, duckdb_date value);
	duckdb_state (*duckdb_append_time)(duckdb_appender appender, duckdb_time value);
	duckdb_state (*duckdb_append_timestamp)(duckdb_appender appender, duckdb_timestamp value);
	duckdb_state (*duckdb_append_interval)(duckdb_appender appender, duckdb_interval value);
	duckdb_state (*duckdb_append_varchar)(duckdb_appender appender, const char *val);
	duckdb_state (*duckdb_append_varchar_length)(duckdb_appender appender, const char *val, idx_t length);
	duckdb_state (*duckdb_append_blob)(duckdb_appender appender, const void *data, idx_t length);
	duckdb_state (*duckdb_append_null)(duckdb_appender appender);
	duckdb_state (*duckdb_append_data_chunk)(duckdb_appender appender, duckdb_data_chunk chunk);
	void (*duckdb_execute_tasks)(duckdb_database database, idx_t max_tasks);
	duckdb_task_state (*duckdb_create_task_state)(duckdb_database database);
	void (*duckdb_execute_tasks_state)(duckdb_task_state state);
	idx_t (*duckdb_execute_n_tasks_state)(duckdb_task_state state, idx_t max_tasks);
	void (*duckdb_finish_execution)(duckdb_task_state state);
	bool (*duckdb_task_state_is_finished)(duckdb_task_state state);
	void (*duckdb_destroy_task_state)(duckdb_task_state state);
	bool (*duckdb_execution_is_finished)(duckdb_connection con);
	duckdb_profiling_info (*duckdb_get_profiling_info)(duckdb_connection connection);
	duckdb_value (*duckdb_profiling_info_get_value)(duckdb_profiling_info info, const char *key);
	idx_t (*duckdb_profiling_info_get_child_count)(duckdb_profiling_info info);
	duckdb_profiling_info (*duckdb_profiling_info_get_child)(duckdb_profiling_info info, idx_t index);
	duckdb_value (*duckdb_profiling_info_get_metrics)(duckdb_profiling_info info);
	void (*duckdb_scalar_function_set_varargs)(duckdb_scalar_function scalar_function, duckdb_logical_type type);
	void (*duckdb_scalar_function_set_special_handling)(duckdb_scalar_function scalar_function);
	void (*duckdb_scalar_function_set_volatile)(duckdb_scalar_function scalar_function);
	void *(*duckdb_scalar_function_get_extra_info)(duckdb_function_info info);
	void (*duckdb_scalar_function_set_error)(duckdb_function_info info, const char *error);
	duckdb_state (*duckdb_table_description_create)(duckdb_connection connection, const char *schema, const char *table,
	                                                duckdb_table_description *out);
	void (*duckdb_table_description_destroy)(duckdb_table_description *table_description);
	const char *(*duckdb_table_description_error)(duckdb_table_description table_description);
	duckdb_error_type (*duckdb_result_error_type)(duckdb_result *result);
	uint32_t (*duckdb_string_t_length)(duckdb_string_t string);
	const char *(*duckdb_string_t_data)(duckdb_string_t *string);
	duckdb_value (*duckdb_create_bool)(bool input);
	duckdb_value (*duckdb_create_int8)(int8_t input);
	duckdb_value (*duckdb_create_uint8)(uint8_t input);
	duckdb_value (*duckdb_create_int16)(int16_t input);
	duckdb_value (*duckdb_create_uint16)(uint16_t input);
	duckdb_value (*duckdb_create_int32)(int32_t input);
	duckdb_value (*duckdb_create_uint32)(uint32_t input);
	duckdb_value (*duckdb_create_uint64)(uint64_t input);
	duckdb_value (*duckdb_create_hugeint)(duckdb_hugeint input);
	duckdb_value (*duckdb_create_uhugeint)(duckdb_uhugeint input);
	duckdb_value (*duckdb_create_float)(float input);
	duckdb_value (*duckdb_create_double)(double input);
	duckdb_value (*duckdb_create_date)(duckdb_date input);
	duckdb_value (*duckdb_create_time)(duckdb_time input);
	duckdb_value (*duckdb_create_time_tz_value)(duckdb_time_tz value);
	duckdb_value (*duckdb_create_timestamp)(duckdb_timestamp input);
	duckdb_value (*duckdb_create_interval)(duckdb_interval input);
	duckdb_value (*duckdb_create_blob)(const uint8_t *data, idx_t length);
	bool (*duckdb_get_bool)(duckdb_value val);
	int8_t (*duckdb_get_int8)(duckdb_value val);
	uint8_t (*duckdb_get_uint8)(duckdb_value val);
	int16_t (*duckdb_get_int16)(duckdb_value val);
	uint16_t (*duckdb_get_uint16)(duckdb_value val);
	int32_t (*duckdb_get_int32)(duckdb_value val);
	uint32_t (*duckdb_get_uint32)(duckdb_value val);
	uint64_t (*duckdb_get_uint64)(duckdb_value val);
	duckdb_hugeint (*duckdb_get_hugeint)(duckdb_value val);
	duckdb_uhugeint (*duckdb_get_uhugeint)(duckdb_value val);
	float (*duckdb_get_float)(duckdb_value val);
	double (*duckdb_get_double)(duckdb_value val);
	duckdb_date (*duckdb_get_date)(duckdb_value val);
	duckdb_time (*duckdb_get_time)(duckdb_value val);
	duckdb_time_tz (*duckdb_get_time_tz)(duckdb_value val);
	duckdb_timestamp (*duckdb_get_timestamp)(duckdb_value val);
	duckdb_interval (*duckdb_get_interval)(duckdb_value val);
	duckdb_logical_type (*duckdb_get_value_type)(duckdb_value val);
	duckdb_blob (*duckdb_get_blob)(duckdb_value val);
	duckdb_scalar_function_set (*duckdb_create_scalar_function_set)(const char *name);
	void (*duckdb_destroy_scalar_function_set)(duckdb_scalar_function_set *scalar_function_set);
	duckdb_state (*duckdb_add_scalar_function_to_set)(duckdb_scalar_function_set set, duckdb_scalar_function function);
	duckdb_state (*duckdb_register_scalar_function_set)(duckdb_connection con, duckdb_scalar_function_set set);
	duckdb_aggregate_function_set (*duckdb_create_aggregate_function_set)(const char *name);
	void (*duckdb_destroy_aggregate_function_set)(duckdb_aggregate_function_set *aggregate_function_set);
	duckdb_state (*duckdb_add_aggregate_function_to_set)(duckdb_aggregate_function_set set,
	                                                     duckdb_aggregate_function function);
	duckdb_state (*duckdb_register_aggregate_function_set)(duckdb_connection con, duckdb_aggregate_function_set set);
	idx_t (*duckdb_get_map_size)(duckdb_value value);
	duckdb_value (*duckdb_get_map_key)(duckdb_value value, idx_t index);
	duckdb_value (*duckdb_get_map_value)(duckdb_value value, idx_t index);
	duckdb_aggregate_function (*duckdb_create_aggregate_function)();
	void (*duckdb_destroy_aggregate_function)(duckdb_aggregate_function *aggregate_function);
	void (*duckdb_aggregate_function_set_name)(duckdb_aggregate_function aggregate_function, const char *name);
	void (*duckdb_aggregate_function_add_parameter)(duckdb_aggregate_function aggregate_function,
	                                                duckdb_logical_type type);
	void (*duckdb_aggregate_function_set_return_type)(duckdb_aggregate_function aggregate_function,
	                                                  duckdb_logical_type type);
	void (*duckdb_aggregate_function_set_functions)(duckdb_aggregate_function aggregate_function,
	                                                duckdb_aggregate_state_size state_size,
	                                                duckdb_aggregate_init_t state_init,
	                                                duckdb_aggregate_update_t update,
	                                                duckdb_aggregate_combine_t combine,
	                                                duckdb_aggregate_finalize_t finalize);
	void (*duckdb_aggregate_function_set_destructor)(duckdb_aggregate_function aggregate_function,
	                                                 duckdb_aggregate_destroy_t destroy);
	duckdb_state (*duckdb_register_aggregate_function)(duckdb_connection con,
	                                                   duckdb_aggregate_function aggregate_function);
	void (*duckdb_aggregate_function_set_special_handling)(duckdb_aggregate_function aggregate_function);
	void (*duckdb_aggregate_function_set_extra_info)(duckdb_aggregate_function aggregate_function, void *extra_info,
	                                                 duckdb_delete_callback_t destroy);
	void *(*duckdb_aggregate_function_get_extra_info)(duckdb_function_info info);
	void (*duckdb_aggregate_function_set_error)(duckdb_function_info info, const char *error);
	void (*duckdb_logical_type_set_alias)(duckdb_logical_type type, const char *alias);
	duckdb_state (*duckdb_register_logical_type)(duckdb_connection con, duckdb_logical_type type,
	                                             duckdb_create_type_info info);
	duckdb_cast_function (*duckdb_create_cast_function)();
	void (*duckdb_cast_function_set_source_type)(duckdb_cast_function cast_function, duckdb_logical_type source_type);
	void (*duckdb_cast_function_set_target_type)(duckdb_cast_function cast_function, duckdb_logical_type target_type);
	void (*duckdb_cast_function_set_implicit_cast_cost)(duckdb_cast_function cast_function, int64_t cost);
	void (*duckdb_cast_function_set_function)(duckdb_cast_function cast_function, duckdb_cast_function_t function);
	void (*duckdb_cast_function_set_extra_info)(duckdb_cast_function cast_function, void *extra_info,
	                                            duckdb_delete_callback_t destroy);
	void *(*duckdb_cast_function_get_extra_info)(duckdb_function_info info);
	duckdb_cast_mode (*duckdb_cast_function_get_cast_mode)(duckdb_function_info info);
	void (*duckdb_cast_function_set_error)(duckdb_function_info info, const char *error);
	void (*duckdb_cast_function_set_row_error)(duckdb_function_info info, const char *error, idx_t row,
	                                           duckdb_vector output);
	duckdb_state (*duckdb_register_cast_function)(duckdb_connection con, duckdb_cast_function cast_function);
	void (*duckdb_destroy_cast_function)(duckdb_cast_function *cast_function);
	idx_t (*duckdb_row_count)(duckdb_result *result);
	void *(*duckdb_column_data)(duckdb_result *result, idx_t col);
	bool *(*duckdb_nullmask_data)(duckdb_result *result, idx_t col);
	duckdb_data_chunk (*duckdb_result_get_chunk)(duckdb_result result, idx_t chunk_index);
	bool (*duckdb_result_is_streaming)(duckdb_result result);
	idx_t (*duckdb_result_chunk_count)(duckdb_result result);
	duckdb_result_type (*duckdb_result_return_type)(duckdb_result result);
	bool (*duckdb_value_boolean)(duckdb_result *result, idx_t col, idx_t row);
	int8_t (*duckdb_value_int8)(duckdb_result *result, idx_t col, idx_t row);
	int16_t (*duckdb_value_int16)(duckdb_result *result, idx_t col, idx_t row);
	int32_t (*duckdb_value_int32)(duckdb_result *result, idx_t col, idx_t row);
	int64_t (*duckdb_value_int64)(duckdb_result *result, idx_t col, idx_t row);
	duckdb_hugeint (*duckdb_value_hugeint)(duckdb_result *result, idx_t col, idx_t row);
	duckdb_uhugeint (*duckdb_value_uhugeint)(duckdb_result *result, idx_t col, idx_t row);
	duckdb_decimal (*duckdb_value_decimal)(duckdb_result *result, idx_t col, idx_t row);
	uint8_t (*duckdb_value_uint8)(duckdb_result *result, idx_t col, idx_t row);
	uint16_t (*duckdb_value_uint16)(duckdb_result *result, idx_t col, idx_t row);
	uint32_t (*duckdb_value_uint32)(duckdb_result *result, idx_t col, idx_t row);
	uint64_t (*duckdb_value_uint64)(duckdb_result *result, idx_t col, idx_t row);
	float (*duckdb_value_float)(duckdb_result *result, idx_t col, idx_t row);
	double (*duckdb_value_double)(duckdb_result *result, idx_t col, idx_t row);
	duckdb_date (*duckdb_value_date)(duckdb_result *result, idx_t col, idx_t row);
	duckdb_time (*duckdb_value_time)(duckdb_result *result, idx_t col, idx_t row);
	duckdb_timestamp (*duckdb_value_timestamp)(duckdb_result *result, idx_t col, idx_t row);
	duckdb_interval (*duckdb_value_interval)(duckdb_result *result, idx_t col, idx_t row);
	char *(*duckdb_value_varchar)(duckdb_result *result, idx_t col, idx_t row);
	duckdb_string (*duckdb_value_string)(duckdb_result *result, idx_t col, idx_t row);
	char *(*duckdb_value_varchar_internal)(duckdb_result *result, idx_t col, idx_t row);
	duckdb_string (*duckdb_value_string_internal)(duckdb_result *result, idx_t col, idx_t row);
	duckdb_blob (*duckdb_value_blob)(duckdb_result *result, idx_t col, idx_t row);
	bool (*duckdb_value_is_null)(duckdb_result *result, idx_t col, idx_t row);
	duckdb_state (*duckdb_execute_prepared_streaming)(duckdb_prepared_statement prepared_statement,
	                                                  duckdb_result *out_result);
	duckdb_state (*duckdb_pending_prepared_streaming)(duckdb_prepared_statement prepared_statement,
	                                                  duckdb_pending_result *out_result);
	duckdb_state (*duckdb_column_has_default)(duckdb_table_description table_description, idx_t index, bool *out);
	duckdb_state (*duckdb_query_arrow)(duckdb_connection connection, const char *query, duckdb_arrow *out_result);
	duckdb_state (*duckdb_query_arrow_schema)(duckdb_arrow result, duckdb_arrow_schema *out_schema);
	duckdb_state (*duckdb_prepared_arrow_schema)(duckdb_prepared_statement prepared, duckdb_arrow_schema *out_schema);
	void (*duckdb_result_arrow_array)(duckdb_result result, duckdb_data_chunk chunk, duckdb_arrow_array *out_array);
	duckdb_state (*duckdb_query_arrow_array)(duckdb_arrow result, duckdb_arrow_array *out_array);
	idx_t (*duckdb_arrow_column_count)(duckdb_arrow result);
	idx_t (*duckdb_arrow_row_count)(duckdb_arrow result);
	idx_t (*duckdb_arrow_rows_changed)(duckdb_arrow result);
	const char *(*duckdb_query_arrow_error)(duckdb_arrow result);
	void (*duckdb_destroy_arrow)(duckdb_arrow *result);
	void (*duckdb_destroy_arrow_stream)(duckdb_arrow_stream *stream_p);
	duckdb_state (*duckdb_execute_prepared_arrow)(duckdb_prepared_statement prepared_statement,
	                                              duckdb_arrow *out_result);
	duckdb_state (*duckdb_arrow_scan)(duckdb_connection connection, const char *table_name, duckdb_arrow_stream arrow);
	duckdb_state (*duckdb_arrow_array_scan)(duckdb_connection connection, const char *table_name,
	                                        duckdb_arrow_schema arrow_schema, duckdb_arrow_array arrow_array,
	                                        duckdb_arrow_stream *out_stream);
	duckdb_data_chunk (*duckdb_stream_fetch_chunk)(duckdb_result result);
} duckdb_ext_api_v0;

typedef duckdb_state (*__duckdb_open)(const char *path, duckdb_database *out_database);

static duckdb_state _duckdb_open(__duckdb_open f, const char *path, duckdb_database *out_database) {
	return f(path, out_database);
}

typedef duckdb_state (*__duckdb_open_ext)(const char *path, duckdb_database *out_database, duckdb_config config,
                                          char **out_error);

static duckdb_state _duckdb_open_ext(__duckdb_open_ext f, const char *path, duckdb_database *out_database,
                                     duckdb_config config, char **out_error) {
	return f(path, out_database, config, out_error);
}

typedef void (*__duckdb_close)(duckdb_database *database);

static void _duckdb_close(__duckdb_close f, duckdb_database *database) {
	return f(database);
}

typedef duckdb_state (*__duckdb_connect)(duckdb_database database, duckdb_connection *out_connection);

static duckdb_state _duckdb_connect(__duckdb_connect f, duckdb_database database, duckdb_connection *out_connection) {
	return f(database, out_connection);
}

typedef void (*__duckdb_interrupt)(duckdb_connection connection);

static void _duckdb_interrupt(__duckdb_interrupt f, duckdb_connection connection) {
	return f(connection);
}

typedef duckdb_query_progress_type (*__duckdb_query_progress)(duckdb_connection connection);

static duckdb_query_progress_type _duckdb_query_progress(__duckdb_query_progress f, duckdb_connection connection) {
	return f(connection);
}

typedef void (*__duckdb_disconnect)(duckdb_connection *connection);

static void _duckdb_disconnect(__duckdb_disconnect f, duckdb_connection *connection) {
	return f(connection);
}

typedef const char *(*__duckdb_library_version)();

static const char *_duckdb_library_version(__duckdb_library_version f) {
	return f();
}

typedef duckdb_state (*__duckdb_create_config)(duckdb_config *out_config);

static duckdb_state _duckdb_create_config(__duckdb_create_config f, duckdb_config *out_config) {
	return f(out_config);
}

typedef size_t (*__duckdb_config_count)();

static size_t _duckdb_config_count(__duckdb_config_count f) {
	return f();
}

typedef duckdb_state (*__duckdb_get_config_flag)(size_t index, const char **out_name, const char **out_description);

static duckdb_state _duckdb_get_config_flag(__duckdb_get_config_flag f, size_t index, const char **out_name,
                                            const char **out_description) {
	return f(index, out_name, out_description);
}

typedef duckdb_state (*__duckdb_set_config)(duckdb_config config, const char *name, const char *option);

static duckdb_state _duckdb_set_config(__duckdb_set_config f, duckdb_config config, const char *name,
                                       const char *option) {
	return f(config, name, option);
}

typedef void (*__duckdb_destroy_config)(duckdb_config *config);

static void _duckdb_destroy_config(__duckdb_destroy_config f, duckdb_config *config) {
	return f(config);
}

typedef duckdb_state (*__duckdb_query)(duckdb_connection connection, const char *query, duckdb_result *out_result);

static duckdb_state _duckdb_query(__duckdb_query f, duckdb_connection connection, const char *query,
                                  duckdb_result *out_result) {
	return f(connection, query, out_result);
}

typedef void (*__duckdb_destroy_result)(duckdb_result *result);

static void _duckdb_destroy_result(__duckdb_destroy_result f, duckdb_result *result) {
	return f(result);
}

typedef const char *(*__duckdb_column_name)(duckdb_result *result, idx_t col);

static const char *_duckdb_column_name(__duckdb_column_name f, duckdb_result *result, idx_t col) {
	return f(result, col);
}

typedef duckdb_type (*__duckdb_column_type)(duckdb_result *result, idx_t col);

static duckdb_type _duckdb_column_type(__duckdb_column_type f, duckdb_result *result, idx_t col) {
	return f(result, col);
}

typedef duckdb_statement_type (*__duckdb_result_statement_type)(duckdb_result result);

static duckdb_statement_type _duckdb_result_statement_type(__duckdb_result_statement_type f, duckdb_result result) {
	return f(result);
}

typedef duckdb_logical_type (*__duckdb_column_logical_type)(duckdb_result *result, idx_t col);

static duckdb_logical_type _duckdb_column_logical_type(__duckdb_column_logical_type f, duckdb_result *result,
                                                       idx_t col) {
	return f(result, col);
}

typedef idx_t (*__duckdb_column_count)(duckdb_result *result);

static idx_t _duckdb_column_count(__duckdb_column_count f, duckdb_result *result) {
	return f(result);
}

typedef idx_t (*__duckdb_rows_changed)(duckdb_result *result);

static idx_t _duckdb_rows_changed(__duckdb_rows_changed f, duckdb_result *result) {
	return f(result);
}

typedef const char *(*__duckdb_result_error)(duckdb_result *result);

static const char *_duckdb_result_error(__duckdb_result_error f, duckdb_result *result) {
	return f(result);
}

typedef void *(*__duckdb_malloc)(size_t size);

static void *_duckdb_malloc(__duckdb_malloc f, size_t size) {
	return f(size);
}

typedef void (*__duckdb_free)(void *ptr);

static void _duckdb_free(__duckdb_free f, void *ptr) {
	return f(ptr);
}

typedef idx_t (*__duckdb_vector_size)();

static idx_t _duckdb_vector_size(__duckdb_vector_size f) {
	return f();
}

typedef bool (*__duckdb_string_is_inlined)(duckdb_string_t string);

static bool _duckdb_string_is_inlined(__duckdb_string_is_inlined f, duckdb_string_t string) {
	return f(string);
}

typedef duckdb_date_struct (*__duckdb_from_date)(duckdb_date date);

static duckdb_date_struct _duckdb_from_date(__duckdb_from_date f, duckdb_date date) {
	return f(date);
}

typedef duckdb_date (*__duckdb_to_date)(duckdb_date_struct date);

static duckdb_date _duckdb_to_date(__duckdb_to_date f, duckdb_date_struct date) {
	return f(date);
}

typedef bool (*__duckdb_is_finite_date)(duckdb_date date);

static bool _duckdb_is_finite_date(__duckdb_is_finite_date f, duckdb_date date) {
	return f(date);
}

typedef duckdb_time_struct (*__duckdb_from_time)(duckdb_time time);

static duckdb_time_struct _duckdb_from_time(__duckdb_from_time f, duckdb_time time) {
	return f(time);
}

typedef duckdb_time_tz (*__duckdb_create_time_tz)(int64_t micros, int32_t offset);

static duckdb_time_tz _duckdb_create_time_tz(__duckdb_create_time_tz f, int64_t micros, int32_t offset) {
	return f(micros, offset);
}

typedef duckdb_time_tz_struct (*__duckdb_from_time_tz)(duckdb_time_tz micros);

static duckdb_time_tz_struct _duckdb_from_time_tz(__duckdb_from_time_tz f, duckdb_time_tz micros) {
	return f(micros);
}

typedef duckdb_time (*__duckdb_to_time)(duckdb_time_struct time);

static duckdb_time _duckdb_to_time(__duckdb_to_time f, duckdb_time_struct time) {
	return f(time);
}

typedef duckdb_timestamp_struct (*__duckdb_from_timestamp)(duckdb_timestamp ts);

static duckdb_timestamp_struct _duckdb_from_timestamp(__duckdb_from_timestamp f, duckdb_timestamp ts) {
	return f(ts);
}

typedef duckdb_timestamp (*__duckdb_to_timestamp)(duckdb_timestamp_struct ts);

static duckdb_timestamp _duckdb_to_timestamp(__duckdb_to_timestamp f, duckdb_timestamp_struct ts) {
	return f(ts);
}

typedef bool (*__duckdb_is_finite_timestamp)(duckdb_timestamp ts);

static bool _duckdb_is_finite_timestamp(__duckdb_is_finite_timestamp f, duckdb_timestamp ts) {
	return f(ts);
}

typedef double (*__duckdb_hugeint_to_double)(duckdb_hugeint val);

static double _duckdb_hugeint_to_double(__duckdb_hugeint_to_double f, duckdb_hugeint val) {
	return f(val);
}

typedef duckdb_hugeint (*__duckdb_double_to_hugeint)(double val);

static duckdb_hugeint _duckdb_double_to_hugeint(__duckdb_double_to_hugeint f, double val) {
	return f(val);
}

typedef double (*__duckdb_uhugeint_to_double)(duckdb_uhugeint val);

static double _duckdb_uhugeint_to_double(__duckdb_uhugeint_to_double f, duckdb_uhugeint val) {
	return f(val);
}

typedef duckdb_uhugeint (*__duckdb_double_to_uhugeint)(double val);

static duckdb_uhugeint _duckdb_double_to_uhugeint(__duckdb_double_to_uhugeint f, double val) {
	return f(val);
}

typedef duckdb_decimal (*__duckdb_double_to_decimal)(double val, uint8_t width, uint8_t scale);

static duckdb_decimal _duckdb_double_to_decimal(__duckdb_double_to_decimal f, double val, uint8_t width,
                                                uint8_t scale) {
	return f(val, width, scale);
}

typedef double (*__duckdb_decimal_to_double)(duckdb_decimal val);

static double _duckdb_decimal_to_double(__duckdb_decimal_to_double f, duckdb_decimal val) {
	return f(val);
}

typedef duckdb_state (*__duckdb_prepare)(duckdb_connection connection, const char *query,
                                         duckdb_prepared_statement *out_prepared_statement);

static duckdb_state _duckdb_prepare(__duckdb_prepare f, duckdb_connection connection, const char *query,
                                    duckdb_prepared_statement *out_prepared_statement) {
	return f(connection, query, out_prepared_statement);
}

typedef void (*__duckdb_destroy_prepare)(duckdb_prepared_statement *prepared_statement);

static void _duckdb_destroy_prepare(__duckdb_destroy_prepare f, duckdb_prepared_statement *prepared_statement) {
	return f(prepared_statement);
}

typedef const char *(*__duckdb_prepare_error)(duckdb_prepared_statement prepared_statement);

static const char *_duckdb_prepare_error(__duckdb_prepare_error f, duckdb_prepared_statement prepared_statement) {
	return f(prepared_statement);
}

typedef idx_t (*__duckdb_nparams)(duckdb_prepared_statement prepared_statement);

static idx_t _duckdb_nparams(__duckdb_nparams f, duckdb_prepared_statement prepared_statement) {
	return f(prepared_statement);
}

typedef const char *(*__duckdb_parameter_name)(duckdb_prepared_statement prepared_statement, idx_t index);

static const char *_duckdb_parameter_name(__duckdb_parameter_name f, duckdb_prepared_statement prepared_statement,
                                          idx_t index) {
	return f(prepared_statement, index);
}

typedef duckdb_type (*__duckdb_param_type)(duckdb_prepared_statement prepared_statement, idx_t param_idx);

static duckdb_type _duckdb_param_type(__duckdb_param_type f, duckdb_prepared_statement prepared_statement,
                                      idx_t param_idx) {
	return f(prepared_statement, param_idx);
}

typedef duckdb_state (*__duckdb_clear_bindings)(duckdb_prepared_statement prepared_statement);

static duckdb_state _duckdb_clear_bindings(__duckdb_clear_bindings f, duckdb_prepared_statement prepared_statement) {
	return f(prepared_statement);
}

typedef duckdb_statement_type (*__duckdb_prepared_statement_type)(duckdb_prepared_statement statement);

static duckdb_statement_type _duckdb_prepared_statement_type(__duckdb_prepared_statement_type f,
                                                             duckdb_prepared_statement statement) {
	return f(statement);
}

typedef duckdb_state (*__duckdb_bind_value)(duckdb_prepared_statement prepared_statement, idx_t param_idx,
                                            duckdb_value val);

static duckdb_state _duckdb_bind_value(__duckdb_bind_value f, duckdb_prepared_statement prepared_statement,
                                       idx_t param_idx, duckdb_value val) {
	return f(prepared_statement, param_idx, val);
}

typedef duckdb_state (*__duckdb_bind_parameter_index)(duckdb_prepared_statement prepared_statement,
                                                      idx_t *param_idx_out, const char *name);

static duckdb_state _duckdb_bind_parameter_index(__duckdb_bind_parameter_index f,
                                                 duckdb_prepared_statement prepared_statement, idx_t *param_idx_out,
                                                 const char *name) {
	return f(prepared_statement, param_idx_out, name);
}

typedef duckdb_state (*__duckdb_bind_boolean)(duckdb_prepared_statement prepared_statement, idx_t param_idx, bool val);

static duckdb_state _duckdb_bind_boolean(__duckdb_bind_boolean f, duckdb_prepared_statement prepared_statement,
                                         idx_t param_idx, bool val) {
	return f(prepared_statement, param_idx, val);
}

typedef duckdb_state (*__duckdb_bind_int8)(duckdb_prepared_statement prepared_statement, idx_t param_idx, int8_t val);

static duckdb_state _duckdb_bind_int8(__duckdb_bind_int8 f, duckdb_prepared_statement prepared_statement,
                                      idx_t param_idx, int8_t val) {
	return f(prepared_statement, param_idx, val);
}

typedef duckdb_state (*__duckdb_bind_int16)(duckdb_prepared_statement prepared_statement, idx_t param_idx, int16_t val);

static duckdb_state _duckdb_bind_int16(__duckdb_bind_int16 f, duckdb_prepared_statement prepared_statement,
                                       idx_t param_idx, int16_t val) {
	return f(prepared_statement, param_idx, val);
}

typedef duckdb_state (*__duckdb_bind_int32)(duckdb_prepared_statement prepared_statement, idx_t param_idx, int32_t val);

static duckdb_state _duckdb_bind_int32(__duckdb_bind_int32 f, duckdb_prepared_statement prepared_statement,
                                       idx_t param_idx, int32_t val) {
	return f(prepared_statement, param_idx, val);
}

typedef duckdb_state (*__duckdb_bind_int64)(duckdb_prepared_statement prepared_statement, idx_t param_idx, int64_t val);

static duckdb_state _duckdb_bind_int64(__duckdb_bind_int64 f, duckdb_prepared_statement prepared_statement,
                                       idx_t param_idx, int64_t val) {
	return f(prepared_statement, param_idx, val);
}

typedef duckdb_state (*__duckdb_bind_hugeint)(duckdb_prepared_statement prepared_statement, idx_t param_idx,
                                              duckdb_hugeint val);

static duckdb_state _duckdb_bind_hugeint(__duckdb_bind_hugeint f, duckdb_prepared_statement prepared_statement,
                                         idx_t param_idx, duckdb_hugeint val) {
	return f(prepared_statement, param_idx, val);
}

typedef duckdb_state (*__duckdb_bind_uhugeint)(duckdb_prepared_statement prepared_statement, idx_t param_idx,
                                               duckdb_uhugeint val);

static duckdb_state _duckdb_bind_uhugeint(__duckdb_bind_uhugeint f, duckdb_prepared_statement prepared_statement,
                                          idx_t param_idx, duckdb_uhugeint val) {
	return f(prepared_statement, param_idx, val);
}

typedef duckdb_state (*__duckdb_bind_decimal)(duckdb_prepared_statement prepared_statement, idx_t param_idx,
                                              duckdb_decimal val);

static duckdb_state _duckdb_bind_decimal(__duckdb_bind_decimal f, duckdb_prepared_statement prepared_statement,
                                         idx_t param_idx, duckdb_decimal val) {
	return f(prepared_statement, param_idx, val);
}

typedef duckdb_state (*__duckdb_bind_uint8)(duckdb_prepared_statement prepared_statement, idx_t param_idx, uint8_t val);

static duckdb_state _duckdb_bind_uint8(__duckdb_bind_uint8 f, duckdb_prepared_statement prepared_statement,
                                       idx_t param_idx, uint8_t val) {
	return f(prepared_statement, param_idx, val);
}

typedef duckdb_state (*__duckdb_bind_uint16)(duckdb_prepared_statement prepared_statement, idx_t param_idx,
                                             uint16_t val);

static duckdb_state _duckdb_bind_uint16(__duckdb_bind_uint16 f, duckdb_prepared_statement prepared_statement,
                                        idx_t param_idx, uint16_t val) {
	return f(prepared_statement, param_idx, val);
}

typedef duckdb_state (*__duckdb_bind_uint32)(duckdb_prepared_statement prepared_statement, idx_t param_idx,
                                             uint32_t val);

static duckdb_state _duckdb_bind_uint32(__duckdb_bind_uint32 f, duckdb_prepared_statement prepared_statement,
                                        idx_t param_idx, uint32_t val) {
	return f(prepared_statement, param_idx, val);
}

typedef duckdb_state (*__duckdb_bind_uint64)(duckdb_prepared_statement prepared_statement, idx_t param_idx,
                                             uint64_t val);

static duckdb_state _duckdb_bind_uint64(__duckdb_bind_uint64 f, duckdb_prepared_statement prepared_statement,
                                        idx_t param_idx, uint64_t val) {
	return f(prepared_statement, param_idx, val);
}

typedef duckdb_state (*__duckdb_bind_float)(duckdb_prepared_statement prepared_statement, idx_t param_idx, float val);

static duckdb_state _duckdb_bind_float(__duckdb_bind_float f, duckdb_prepared_statement prepared_statement,
                                       idx_t param_idx, float val) {
	return f(prepared_statement, param_idx, val);
}

typedef duckdb_state (*__duckdb_bind_double)(duckdb_prepared_statement prepared_statement, idx_t param_idx, double val);

static duckdb_state _duckdb_bind_double(__duckdb_bind_double f, duckdb_prepared_statement prepared_statement,
                                        idx_t param_idx, double val) {
	return f(prepared_statement, param_idx, val);
}

typedef duckdb_state (*__duckdb_bind_date)(duckdb_prepared_statement prepared_statement, idx_t param_idx,
                                           duckdb_date val);

static duckdb_state _duckdb_bind_date(__duckdb_bind_date f, duckdb_prepared_statement prepared_statement,
                                      idx_t param_idx, duckdb_date val) {
	return f(prepared_statement, param_idx, val);
}

typedef duckdb_state (*__duckdb_bind_time)(duckdb_prepared_statement prepared_statement, idx_t param_idx,
                                           duckdb_time val);

static duckdb_state _duckdb_bind_time(__duckdb_bind_time f, duckdb_prepared_statement prepared_statement,
                                      idx_t param_idx, duckdb_time val) {
	return f(prepared_statement, param_idx, val);
}

typedef duckdb_state (*__duckdb_bind_timestamp)(duckdb_prepared_statement prepared_statement, idx_t param_idx,
                                                duckdb_timestamp val);

static duckdb_state _duckdb_bind_timestamp(__duckdb_bind_timestamp f, duckdb_prepared_statement prepared_statement,
                                           idx_t param_idx, duckdb_timestamp val) {
	return f(prepared_statement, param_idx, val);
}

typedef duckdb_state (*__duckdb_bind_timestamp_tz)(duckdb_prepared_statement prepared_statement, idx_t param_idx,
                                                   duckdb_timestamp val);

static duckdb_state _duckdb_bind_timestamp_tz(__duckdb_bind_timestamp_tz f,
                                              duckdb_prepared_statement prepared_statement, idx_t param_idx,
                                              duckdb_timestamp val) {
	return f(prepared_statement, param_idx, val);
}

typedef duckdb_state (*__duckdb_bind_interval)(duckdb_prepared_statement prepared_statement, idx_t param_idx,
                                               duckdb_interval val);

static duckdb_state _duckdb_bind_interval(__duckdb_bind_interval f, duckdb_prepared_statement prepared_statement,
                                          idx_t param_idx, duckdb_interval val) {
	return f(prepared_statement, param_idx, val);
}

typedef duckdb_state (*__duckdb_bind_varchar)(duckdb_prepared_statement prepared_statement, idx_t param_idx,
                                              const char *val);

static duckdb_state _duckdb_bind_varchar(__duckdb_bind_varchar f, duckdb_prepared_statement prepared_statement,
                                         idx_t param_idx, const char *val) {
	return f(prepared_statement, param_idx, val);
}

typedef duckdb_state (*__duckdb_bind_varchar_length)(duckdb_prepared_statement prepared_statement, idx_t param_idx,
                                                     const char *val, idx_t length);

static duckdb_state _duckdb_bind_varchar_length(__duckdb_bind_varchar_length f,
                                                duckdb_prepared_statement prepared_statement, idx_t param_idx,
                                                const char *val, idx_t length) {
	return f(prepared_statement, param_idx, val, length);
}

typedef duckdb_state (*__duckdb_bind_blob)(duckdb_prepared_statement prepared_statement, idx_t param_idx,
                                           const void *data, idx_t length);

static duckdb_state _duckdb_bind_blob(__duckdb_bind_blob f, duckdb_prepared_statement prepared_statement,
                                      idx_t param_idx, const void *data, idx_t length) {
	return f(prepared_statement, param_idx, data, length);
}

typedef duckdb_state (*__duckdb_bind_null)(duckdb_prepared_statement prepared_statement, idx_t param_idx);

static duckdb_state _duckdb_bind_null(__duckdb_bind_null f, duckdb_prepared_statement prepared_statement,
                                      idx_t param_idx) {
	return f(prepared_statement, param_idx);
}

typedef duckdb_state (*__duckdb_execute_prepared)(duckdb_prepared_statement prepared_statement,
                                                  duckdb_result *out_result);

static duckdb_state _duckdb_execute_prepared(__duckdb_execute_prepared f, duckdb_prepared_statement prepared_statement,
                                             duckdb_result *out_result) {
	return f(prepared_statement, out_result);
}

typedef idx_t (*__duckdb_extract_statements)(duckdb_connection connection, const char *query,
                                             duckdb_extracted_statements *out_extracted_statements);

static idx_t _duckdb_extract_statements(__duckdb_extract_statements f, duckdb_connection connection, const char *query,
                                        duckdb_extracted_statements *out_extracted_statements) {
	return f(connection, query, out_extracted_statements);
}

typedef duckdb_state (*__duckdb_prepare_extracted_statement)(duckdb_connection connection,
                                                             duckdb_extracted_statements extracted_statements,
                                                             idx_t index,
                                                             duckdb_prepared_statement *out_prepared_statement);

static duckdb_state _duckdb_prepare_extracted_statement(__duckdb_prepare_extracted_statement f,
                                                        duckdb_connection connection,
                                                        duckdb_extracted_statements extracted_statements, idx_t index,
                                                        duckdb_prepared_statement *out_prepared_statement) {
	return f(connection, extracted_statements, index, out_prepared_statement);
}

typedef const char *(*__duckdb_extract_statements_error)(duckdb_extracted_statements extracted_statements);

static const char *_duckdb_extract_statements_error(__duckdb_extract_statements_error f,
                                                    duckdb_extracted_statements extracted_statements) {
	return f(extracted_statements);
}

typedef void (*__duckdb_destroy_extracted)(duckdb_extracted_statements *extracted_statements);

static void _duckdb_destroy_extracted(__duckdb_destroy_extracted f, duckdb_extracted_statements *extracted_statements) {
	return f(extracted_statements);
}

typedef duckdb_state (*__duckdb_pending_prepared)(duckdb_prepared_statement prepared_statement,
                                                  duckdb_pending_result *out_result);

static duckdb_state _duckdb_pending_prepared(__duckdb_pending_prepared f, duckdb_prepared_statement prepared_statement,
                                             duckdb_pending_result *out_result) {
	return f(prepared_statement, out_result);
}

typedef void (*__duckdb_destroy_pending)(duckdb_pending_result *pending_result);

static void _duckdb_destroy_pending(__duckdb_destroy_pending f, duckdb_pending_result *pending_result) {
	return f(pending_result);
}

typedef const char *(*__duckdb_pending_error)(duckdb_pending_result pending_result);

static const char *_duckdb_pending_error(__duckdb_pending_error f, duckdb_pending_result pending_result) {
	return f(pending_result);
}

typedef duckdb_pending_state (*__duckdb_pending_execute_task)(duckdb_pending_result pending_result);

static duckdb_pending_state _duckdb_pending_execute_task(__duckdb_pending_execute_task f,
                                                         duckdb_pending_result pending_result) {
	return f(pending_result);
}

typedef duckdb_pending_state (*__duckdb_pending_execute_check_state)(duckdb_pending_result pending_result);

static duckdb_pending_state _duckdb_pending_execute_check_state(__duckdb_pending_execute_check_state f,
                                                                duckdb_pending_result pending_result) {
	return f(pending_result);
}

typedef duckdb_state (*__duckdb_execute_pending)(duckdb_pending_result pending_result, duckdb_result *out_result);

static duckdb_state _duckdb_execute_pending(__duckdb_execute_pending f, duckdb_pending_result pending_result,
                                            duckdb_result *out_result) {
	return f(pending_result, out_result);
}

typedef bool (*__duckdb_pending_execution_is_finished)(duckdb_pending_state pending_state);

static bool _duckdb_pending_execution_is_finished(__duckdb_pending_execution_is_finished f,
                                                  duckdb_pending_state pending_state) {
	return f(pending_state);
}

typedef void (*__duckdb_destroy_value)(duckdb_value *value);

static void _duckdb_destroy_value(__duckdb_destroy_value f, duckdb_value *value) {
	return f(value);
}

typedef duckdb_value (*__duckdb_create_varchar)(const char *text);

static duckdb_value _duckdb_create_varchar(__duckdb_create_varchar f, const char *text) {
	return f(text);
}

typedef duckdb_value (*__duckdb_create_varchar_length)(const char *text, idx_t length);

static duckdb_value _duckdb_create_varchar_length(__duckdb_create_varchar_length f, const char *text, idx_t length) {
	return f(text, length);
}

typedef duckdb_value (*__duckdb_create_int64)(int64_t val);

static duckdb_value _duckdb_create_int64(__duckdb_create_int64 f, int64_t val) {
	return f(val);
}

typedef duckdb_value (*__duckdb_create_struct_value)(duckdb_logical_type type, duckdb_value *values);

static duckdb_value _duckdb_create_struct_value(__duckdb_create_struct_value f, duckdb_logical_type type,
                                                duckdb_value *values) {
	return f(type, values);
}

typedef duckdb_value (*__duckdb_create_list_value)(duckdb_logical_type type, duckdb_value *values, idx_t value_count);

static duckdb_value _duckdb_create_list_value(__duckdb_create_list_value f, duckdb_logical_type type,
                                              duckdb_value *values, idx_t value_count) {
	return f(type, values, value_count);
}

typedef duckdb_value (*__duckdb_create_array_value)(duckdb_logical_type type, duckdb_value *values, idx_t value_count);

static duckdb_value _duckdb_create_array_value(__duckdb_create_array_value f, duckdb_logical_type type,
                                               duckdb_value *values, idx_t value_count) {
	return f(type, values, value_count);
}

typedef char *(*__duckdb_get_varchar)(duckdb_value value);

static char *_duckdb_get_varchar(__duckdb_get_varchar f, duckdb_value value) {
	return f(value);
}

typedef int64_t (*__duckdb_get_int64)(duckdb_value val);

static int64_t _duckdb_get_int64(__duckdb_get_int64 f, duckdb_value val) {
	return f(val);
}

typedef duckdb_logical_type (*__duckdb_create_logical_type)(duckdb_type type);

static duckdb_logical_type _duckdb_create_logical_type(__duckdb_create_logical_type f, duckdb_type type) {
	return f(type);
}

typedef char *(*__duckdb_logical_type_get_alias)(duckdb_logical_type type);

static char *_duckdb_logical_type_get_alias(__duckdb_logical_type_get_alias f, duckdb_logical_type type) {
	return f(type);
}

typedef duckdb_logical_type (*__duckdb_create_list_type)(duckdb_logical_type type);

static duckdb_logical_type _duckdb_create_list_type(__duckdb_create_list_type f, duckdb_logical_type type) {
	return f(type);
}

typedef duckdb_logical_type (*__duckdb_create_array_type)(duckdb_logical_type type, idx_t array_size);

static duckdb_logical_type _duckdb_create_array_type(__duckdb_create_array_type f, duckdb_logical_type type,
                                                     idx_t array_size) {
	return f(type, array_size);
}

typedef duckdb_logical_type (*__duckdb_create_map_type)(duckdb_logical_type key_type, duckdb_logical_type value_type);

static duckdb_logical_type _duckdb_create_map_type(__duckdb_create_map_type f, duckdb_logical_type key_type,
                                                   duckdb_logical_type value_type) {
	return f(key_type, value_type);
}

typedef duckdb_logical_type (*__duckdb_create_union_type)(duckdb_logical_type *member_types, const char **member_names,
                                                          idx_t member_count);

static duckdb_logical_type _duckdb_create_union_type(__duckdb_create_union_type f, duckdb_logical_type *member_types,
                                                     const char **member_names, idx_t member_count) {
	return f(member_types, member_names, member_count);
}

typedef duckdb_logical_type (*__duckdb_create_struct_type)(duckdb_logical_type *member_types, const char **member_names,
                                                           idx_t member_count);

static duckdb_logical_type _duckdb_create_struct_type(__duckdb_create_struct_type f, duckdb_logical_type *member_types,
                                                      const char **member_names, idx_t member_count) {
	return f(member_types, member_names, member_count);
}

typedef duckdb_logical_type (*__duckdb_create_enum_type)(const char **member_names, idx_t member_count);

static duckdb_logical_type _duckdb_create_enum_type(__duckdb_create_enum_type f, const char **member_names,
                                                    idx_t member_count) {
	return f(member_names, member_count);
}

typedef duckdb_logical_type (*__duckdb_create_decimal_type)(uint8_t width, uint8_t scale);

static duckdb_logical_type _duckdb_create_decimal_type(__duckdb_create_decimal_type f, uint8_t width, uint8_t scale) {
	return f(width, scale);
}

typedef duckdb_type (*__duckdb_get_type_id)(duckdb_logical_type type);

static duckdb_type _duckdb_get_type_id(__duckdb_get_type_id f, duckdb_logical_type type) {
	return f(type);
}

typedef uint8_t (*__duckdb_decimal_width)(duckdb_logical_type type);

static uint8_t _duckdb_decimal_width(__duckdb_decimal_width f, duckdb_logical_type type) {
	return f(type);
}

typedef uint8_t (*__duckdb_decimal_scale)(duckdb_logical_type type);

static uint8_t _duckdb_decimal_scale(__duckdb_decimal_scale f, duckdb_logical_type type) {
	return f(type);
}

typedef duckdb_type (*__duckdb_decimal_internal_type)(duckdb_logical_type type);

static duckdb_type _duckdb_decimal_internal_type(__duckdb_decimal_internal_type f, duckdb_logical_type type) {
	return f(type);
}

typedef duckdb_type (*__duckdb_enum_internal_type)(duckdb_logical_type type);

static duckdb_type _duckdb_enum_internal_type(__duckdb_enum_internal_type f, duckdb_logical_type type) {
	return f(type);
}

typedef uint32_t (*__duckdb_enum_dictionary_size)(duckdb_logical_type type);

static uint32_t _duckdb_enum_dictionary_size(__duckdb_enum_dictionary_size f, duckdb_logical_type type) {
	return f(type);
}

typedef char *(*__duckdb_enum_dictionary_value)(duckdb_logical_type type, idx_t index);

static char *_duckdb_enum_dictionary_value(__duckdb_enum_dictionary_value f, duckdb_logical_type type, idx_t index) {
	return f(type, index);
}

typedef duckdb_logical_type (*__duckdb_list_type_child_type)(duckdb_logical_type type);

static duckdb_logical_type _duckdb_list_type_child_type(__duckdb_list_type_child_type f, duckdb_logical_type type) {
	return f(type);
}

typedef duckdb_logical_type (*__duckdb_array_type_child_type)(duckdb_logical_type type);

static duckdb_logical_type _duckdb_array_type_child_type(__duckdb_array_type_child_type f, duckdb_logical_type type) {
	return f(type);
}

typedef idx_t (*__duckdb_array_type_array_size)(duckdb_logical_type type);

static idx_t _duckdb_array_type_array_size(__duckdb_array_type_array_size f, duckdb_logical_type type) {
	return f(type);
}

typedef duckdb_logical_type (*__duckdb_map_type_key_type)(duckdb_logical_type type);

static duckdb_logical_type _duckdb_map_type_key_type(__duckdb_map_type_key_type f, duckdb_logical_type type) {
	return f(type);
}

typedef duckdb_logical_type (*__duckdb_map_type_value_type)(duckdb_logical_type type);

static duckdb_logical_type _duckdb_map_type_value_type(__duckdb_map_type_value_type f, duckdb_logical_type type) {
	return f(type);
}

typedef idx_t (*__duckdb_struct_type_child_count)(duckdb_logical_type type);

static idx_t _duckdb_struct_type_child_count(__duckdb_struct_type_child_count f, duckdb_logical_type type) {
	return f(type);
}

typedef char *(*__duckdb_struct_type_child_name)(duckdb_logical_type type, idx_t index);

static char *_duckdb_struct_type_child_name(__duckdb_struct_type_child_name f, duckdb_logical_type type, idx_t index) {
	return f(type, index);
}

typedef duckdb_logical_type (*__duckdb_struct_type_child_type)(duckdb_logical_type type, idx_t index);

static duckdb_logical_type _duckdb_struct_type_child_type(__duckdb_struct_type_child_type f, duckdb_logical_type type,
                                                          idx_t index) {
	return f(type, index);
}

typedef idx_t (*__duckdb_union_type_member_count)(duckdb_logical_type type);

static idx_t _duckdb_union_type_member_count(__duckdb_union_type_member_count f, duckdb_logical_type type) {
	return f(type);
}

typedef char *(*__duckdb_union_type_member_name)(duckdb_logical_type type, idx_t index);

static char *_duckdb_union_type_member_name(__duckdb_union_type_member_name f, duckdb_logical_type type, idx_t index) {
	return f(type, index);
}

typedef duckdb_logical_type (*__duckdb_union_type_member_type)(duckdb_logical_type type, idx_t index);

static duckdb_logical_type _duckdb_union_type_member_type(__duckdb_union_type_member_type f, duckdb_logical_type type,
                                                          idx_t index) {
	return f(type, index);
}

typedef void (*__duckdb_destroy_logical_type)(duckdb_logical_type *type);

static void _duckdb_destroy_logical_type(__duckdb_destroy_logical_type f, duckdb_logical_type *type) {
	return f(type);
}

typedef duckdb_data_chunk (*__duckdb_fetch_chunk)(duckdb_result result);

static duckdb_data_chunk _duckdb_fetch_chunk(__duckdb_fetch_chunk f, duckdb_result result) {
	return f(result);
}

typedef duckdb_data_chunk (*__duckdb_create_data_chunk)(duckdb_logical_type *types, idx_t column_count);

static duckdb_data_chunk _duckdb_create_data_chunk(__duckdb_create_data_chunk f, duckdb_logical_type *types,
                                                   idx_t column_count) {
	return f(types, column_count);
}

typedef void (*__duckdb_destroy_data_chunk)(duckdb_data_chunk *chunk);

static void _duckdb_destroy_data_chunk(__duckdb_destroy_data_chunk f, duckdb_data_chunk *chunk) {
	return f(chunk);
}

typedef void (*__duckdb_data_chunk_reset)(duckdb_data_chunk chunk);

static void _duckdb_data_chunk_reset(__duckdb_data_chunk_reset f, duckdb_data_chunk chunk) {
	return f(chunk);
}

typedef idx_t (*__duckdb_data_chunk_get_column_count)(duckdb_data_chunk chunk);

static idx_t _duckdb_data_chunk_get_column_count(__duckdb_data_chunk_get_column_count f, duckdb_data_chunk chunk) {
	return f(chunk);
}

typedef duckdb_vector (*__duckdb_data_chunk_get_vector)(duckdb_data_chunk chunk, idx_t col_idx);

static duckdb_vector _duckdb_data_chunk_get_vector(__duckdb_data_chunk_get_vector f, duckdb_data_chunk chunk,
                                                   idx_t col_idx) {
	return f(chunk, col_idx);
}

typedef idx_t (*__duckdb_data_chunk_get_size)(duckdb_data_chunk chunk);

static idx_t _duckdb_data_chunk_get_size(__duckdb_data_chunk_get_size f, duckdb_data_chunk chunk) {
	return f(chunk);
}

typedef void (*__duckdb_data_chunk_set_size)(duckdb_data_chunk chunk, idx_t size);

static void _duckdb_data_chunk_set_size(__duckdb_data_chunk_set_size f, duckdb_data_chunk chunk, idx_t size) {
	return f(chunk, size);
}

typedef duckdb_logical_type (*__duckdb_vector_get_column_type)(duckdb_vector vector);

static duckdb_logical_type _duckdb_vector_get_column_type(__duckdb_vector_get_column_type f, duckdb_vector vector) {
	return f(vector);
}

typedef void *(*__duckdb_vector_get_data)(duckdb_vector vector);

static void *_duckdb_vector_get_data(__duckdb_vector_get_data f, duckdb_vector vector) {
	return f(vector);
}

typedef uint64_t *(*__duckdb_vector_get_validity)(duckdb_vector vector);

static uint64_t *_duckdb_vector_get_validity(__duckdb_vector_get_validity f, duckdb_vector vector) {
	return f(vector);
}

typedef void (*__duckdb_vector_ensure_validity_writable)(duckdb_vector vector);

static void _duckdb_vector_ensure_validity_writable(__duckdb_vector_ensure_validity_writable f, duckdb_vector vector) {
	return f(vector);
}

typedef void (*__duckdb_vector_assign_string_element)(duckdb_vector vector, idx_t index, const char *str);

static void _duckdb_vector_assign_string_element(__duckdb_vector_assign_string_element f, duckdb_vector vector,
                                                 idx_t index, const char *str) {
	return f(vector, index, str);
}

typedef void (*__duckdb_vector_assign_string_element_len)(duckdb_vector vector, idx_t index, const char *str,
                                                          idx_t str_len);

static void _duckdb_vector_assign_string_element_len(__duckdb_vector_assign_string_element_len f, duckdb_vector vector,
                                                     idx_t index, const char *str, idx_t str_len) {
	return f(vector, index, str, str_len);
}

typedef duckdb_vector (*__duckdb_list_vector_get_child)(duckdb_vector vector);

static duckdb_vector _duckdb_list_vector_get_child(__duckdb_list_vector_get_child f, duckdb_vector vector) {
	return f(vector);
}

typedef idx_t (*__duckdb_list_vector_get_size)(duckdb_vector vector);

static idx_t _duckdb_list_vector_get_size(__duckdb_list_vector_get_size f, duckdb_vector vector) {
	return f(vector);
}

typedef duckdb_state (*__duckdb_list_vector_set_size)(duckdb_vector vector, idx_t size);

static duckdb_state _duckdb_list_vector_set_size(__duckdb_list_vector_set_size f, duckdb_vector vector, idx_t size) {
	return f(vector, size);
}

typedef duckdb_state (*__duckdb_list_vector_reserve)(duckdb_vector vector, idx_t required_capacity);

static duckdb_state _duckdb_list_vector_reserve(__duckdb_list_vector_reserve f, duckdb_vector vector,
                                                idx_t required_capacity) {
	return f(vector, required_capacity);
}

typedef duckdb_vector (*__duckdb_struct_vector_get_child)(duckdb_vector vector, idx_t index);

static duckdb_vector _duckdb_struct_vector_get_child(__duckdb_struct_vector_get_child f, duckdb_vector vector,
                                                     idx_t index) {
	return f(vector, index);
}

typedef duckdb_vector (*__duckdb_array_vector_get_child)(duckdb_vector vector);

static duckdb_vector _duckdb_array_vector_get_child(__duckdb_array_vector_get_child f, duckdb_vector vector) {
	return f(vector);
}

typedef bool (*__duckdb_validity_row_is_valid)(uint64_t *validity, idx_t row);

static bool _duckdb_validity_row_is_valid(__duckdb_validity_row_is_valid f, uint64_t *validity, idx_t row) {
	return f(validity, row);
}

typedef void (*__duckdb_validity_set_row_validity)(uint64_t *validity, idx_t row, bool valid);

static void _duckdb_validity_set_row_validity(__duckdb_validity_set_row_validity f, uint64_t *validity, idx_t row,
                                              bool valid) {
	return f(validity, row, valid);
}

typedef void (*__duckdb_validity_set_row_invalid)(uint64_t *validity, idx_t row);

static void _duckdb_validity_set_row_invalid(__duckdb_validity_set_row_invalid f, uint64_t *validity, idx_t row) {
	return f(validity, row);
}

typedef void (*__duckdb_validity_set_row_valid)(uint64_t *validity, idx_t row);

static void _duckdb_validity_set_row_valid(__duckdb_validity_set_row_valid f, uint64_t *validity, idx_t row) {
	return f(validity, row);
}

typedef duckdb_scalar_function (*__duckdb_create_scalar_function)();

static duckdb_scalar_function _duckdb_create_scalar_function(__duckdb_create_scalar_function f) {
	return f();
}

typedef void (*__duckdb_destroy_scalar_function)(duckdb_scalar_function *scalar_function);

static void _duckdb_destroy_scalar_function(__duckdb_destroy_scalar_function f,
                                            duckdb_scalar_function *scalar_function) {
	return f(scalar_function);
}

typedef void (*__duckdb_scalar_function_set_name)(duckdb_scalar_function scalar_function, const char *name);

static void _duckdb_scalar_function_set_name(__duckdb_scalar_function_set_name f,
                                             duckdb_scalar_function scalar_function, const char *name) {
	return f(scalar_function, name);
}

typedef void (*__duckdb_scalar_function_add_parameter)(duckdb_scalar_function scalar_function,
                                                       duckdb_logical_type type);

static void _duckdb_scalar_function_add_parameter(__duckdb_scalar_function_add_parameter f,
                                                  duckdb_scalar_function scalar_function, duckdb_logical_type type) {
	return f(scalar_function, type);
}

typedef void (*__duckdb_scalar_function_set_return_type)(duckdb_scalar_function scalar_function,
                                                         duckdb_logical_type type);

static void _duckdb_scalar_function_set_return_type(__duckdb_scalar_function_set_return_type f,
                                                    duckdb_scalar_function scalar_function, duckdb_logical_type type) {
	return f(scalar_function, type);
}

typedef void (*__duckdb_scalar_function_set_extra_info)(duckdb_scalar_function scalar_function, void *extra_info,
                                                        duckdb_delete_callback_t destroy);

static void _duckdb_scalar_function_set_extra_info(__duckdb_scalar_function_set_extra_info f,
                                                   duckdb_scalar_function scalar_function, void *extra_info,
                                                   duckdb_delete_callback_t destroy) {
	return f(scalar_function, extra_info, destroy);
}

typedef void (*__duckdb_scalar_function_set_function)(duckdb_scalar_function scalar_function,
                                                      duckdb_scalar_function_t function);

static void _duckdb_scalar_function_set_function(__duckdb_scalar_function_set_function f,
                                                 duckdb_scalar_function scalar_function,
                                                 duckdb_scalar_function_t function) {
	return f(scalar_function, function);
}

typedef duckdb_state (*__duckdb_register_scalar_function)(duckdb_connection con,
                                                          duckdb_scalar_function scalar_function);

static duckdb_state _duckdb_register_scalar_function(__duckdb_register_scalar_function f, duckdb_connection con,
                                                     duckdb_scalar_function scalar_function) {
	return f(con, scalar_function);
}

typedef duckdb_table_function (*__duckdb_create_table_function)();

static duckdb_table_function _duckdb_create_table_function(__duckdb_create_table_function f) {
	return f();
}

typedef void (*__duckdb_destroy_table_function)(duckdb_table_function *table_function);

static void _duckdb_destroy_table_function(__duckdb_destroy_table_function f, duckdb_table_function *table_function) {
	return f(table_function);
}

typedef void (*__duckdb_table_function_set_name)(duckdb_table_function table_function, const char *name);

static void _duckdb_table_function_set_name(__duckdb_table_function_set_name f, duckdb_table_function table_function,
                                            const char *name) {
	return f(table_function, name);
}

typedef void (*__duckdb_table_function_add_parameter)(duckdb_table_function table_function, duckdb_logical_type type);

static void _duckdb_table_function_add_parameter(__duckdb_table_function_add_parameter f,
                                                 duckdb_table_function table_function, duckdb_logical_type type) {
	return f(table_function, type);
}

typedef void (*__duckdb_table_function_add_named_parameter)(duckdb_table_function table_function, const char *name,
                                                            duckdb_logical_type type);

static void _duckdb_table_function_add_named_parameter(__duckdb_table_function_add_named_parameter f,
                                                       duckdb_table_function table_function, const char *name,
                                                       duckdb_logical_type type) {
	return f(table_function, name, type);
}

typedef void (*__duckdb_table_function_set_extra_info)(duckdb_table_function table_function, void *extra_info,
                                                       duckdb_delete_callback_t destroy);

static void _duckdb_table_function_set_extra_info(__duckdb_table_function_set_extra_info f,
                                                  duckdb_table_function table_function, void *extra_info,
                                                  duckdb_delete_callback_t destroy) {
	return f(table_function, extra_info, destroy);
}

typedef void (*__duckdb_table_function_set_bind)(duckdb_table_function table_function,
                                                 duckdb_table_function_bind_t bind);

static void _duckdb_table_function_set_bind(__duckdb_table_function_set_bind f, duckdb_table_function table_function,
                                            duckdb_table_function_bind_t bind) {
	return f(table_function, bind);
}

typedef void (*__duckdb_table_function_set_init)(duckdb_table_function table_function,
                                                 duckdb_table_function_init_t init);

static void _duckdb_table_function_set_init(__duckdb_table_function_set_init f, duckdb_table_function table_function,
                                            duckdb_table_function_init_t init) {
	return f(table_function, init);
}

typedef void (*__duckdb_table_function_set_local_init)(duckdb_table_function table_function,
                                                       duckdb_table_function_init_t init);

static void _duckdb_table_function_set_local_init(__duckdb_table_function_set_local_init f,
                                                  duckdb_table_function table_function,
                                                  duckdb_table_function_init_t init) {
	return f(table_function, init);
}

typedef void (*__duckdb_table_function_set_function)(duckdb_table_function table_function,
                                                     duckdb_table_function_t function);

static void _duckdb_table_function_set_function(__duckdb_table_function_set_function f,
                                                duckdb_table_function table_function,
                                                duckdb_table_function_t function) {
	return f(table_function, function);
}

typedef void (*__duckdb_table_function_supports_projection_pushdown)(duckdb_table_function table_function,
                                                                     bool pushdown);

static void _duckdb_table_function_supports_projection_pushdown(__duckdb_table_function_supports_projection_pushdown f,
                                                                duckdb_table_function table_function, bool pushdown) {
	return f(table_function, pushdown);
}

typedef duckdb_state (*__duckdb_register_table_function)(duckdb_connection con, duckdb_table_function function);

static duckdb_state _duckdb_register_table_function(__duckdb_register_table_function f, duckdb_connection con,
                                                    duckdb_table_function function) {
	return f(con, function);
}

typedef void *(*__duckdb_bind_get_extra_info)(duckdb_bind_info info);

static void *_duckdb_bind_get_extra_info(__duckdb_bind_get_extra_info f, duckdb_bind_info info) {
	return f(info);
}

typedef void (*__duckdb_bind_add_result_column)(duckdb_bind_info info, const char *name, duckdb_logical_type type);

static void _duckdb_bind_add_result_column(__duckdb_bind_add_result_column f, duckdb_bind_info info, const char *name,
                                           duckdb_logical_type type) {
	return f(info, name, type);
}

typedef idx_t (*__duckdb_bind_get_parameter_count)(duckdb_bind_info info);

static idx_t _duckdb_bind_get_parameter_count(__duckdb_bind_get_parameter_count f, duckdb_bind_info info) {
	return f(info);
}

typedef duckdb_value (*__duckdb_bind_get_parameter)(duckdb_bind_info info, idx_t index);

static duckdb_value _duckdb_bind_get_parameter(__duckdb_bind_get_parameter f, duckdb_bind_info info, idx_t index) {
	return f(info, index);
}

typedef duckdb_value (*__duckdb_bind_get_named_parameter)(duckdb_bind_info info, const char *name);

static duckdb_value _duckdb_bind_get_named_parameter(__duckdb_bind_get_named_parameter f, duckdb_bind_info info,
                                                     const char *name) {
	return f(info, name);
}

typedef void (*__duckdb_bind_set_bind_data)(duckdb_bind_info info, void *bind_data, duckdb_delete_callback_t destroy);

static void _duckdb_bind_set_bind_data(__duckdb_bind_set_bind_data f, duckdb_bind_info info, void *bind_data,
                                       duckdb_delete_callback_t destroy) {
	return f(info, bind_data, destroy);
}

typedef void (*__duckdb_bind_set_cardinality)(duckdb_bind_info info, idx_t cardinality, bool is_exact);

static void _duckdb_bind_set_cardinality(__duckdb_bind_set_cardinality f, duckdb_bind_info info, idx_t cardinality,
                                         bool is_exact) {
	return f(info, cardinality, is_exact);
}

typedef void (*__duckdb_bind_set_error)(duckdb_bind_info info, const char *error);

static void _duckdb_bind_set_error(__duckdb_bind_set_error f, duckdb_bind_info info, const char *error) {
	return f(info, error);
}

typedef void *(*__duckdb_init_get_extra_info)(duckdb_init_info info);

static void *_duckdb_init_get_extra_info(__duckdb_init_get_extra_info f, duckdb_init_info info) {
	return f(info);
}

typedef void *(*__duckdb_init_get_bind_data)(duckdb_init_info info);

static void *_duckdb_init_get_bind_data(__duckdb_init_get_bind_data f, duckdb_init_info info) {
	return f(info);
}

typedef void (*__duckdb_init_set_init_data)(duckdb_init_info info, void *init_data, duckdb_delete_callback_t destroy);

static void _duckdb_init_set_init_data(__duckdb_init_set_init_data f, duckdb_init_info info, void *init_data,
                                       duckdb_delete_callback_t destroy) {
	return f(info, init_data, destroy);
}

typedef idx_t (*__duckdb_init_get_column_count)(duckdb_init_info info);

static idx_t _duckdb_init_get_column_count(__duckdb_init_get_column_count f, duckdb_init_info info) {
	return f(info);
}

typedef idx_t (*__duckdb_init_get_column_index)(duckdb_init_info info, idx_t column_index);

static idx_t _duckdb_init_get_column_index(__duckdb_init_get_column_index f, duckdb_init_info info,
                                           idx_t column_index) {
	return f(info, column_index);
}

typedef void (*__duckdb_init_set_max_threads)(duckdb_init_info info, idx_t max_threads);

static void _duckdb_init_set_max_threads(__duckdb_init_set_max_threads f, duckdb_init_info info, idx_t max_threads) {
	return f(info, max_threads);
}

typedef void (*__duckdb_init_set_error)(duckdb_init_info info, const char *error);

static void _duckdb_init_set_error(__duckdb_init_set_error f, duckdb_init_info info, const char *error) {
	return f(info, error);
}

typedef void *(*__duckdb_function_get_extra_info)(duckdb_function_info info);

static void *_duckdb_function_get_extra_info(__duckdb_function_get_extra_info f, duckdb_function_info info) {
	return f(info);
}

typedef void *(*__duckdb_function_get_bind_data)(duckdb_function_info info);

static void *_duckdb_function_get_bind_data(__duckdb_function_get_bind_data f, duckdb_function_info info) {
	return f(info);
}

typedef void *(*__duckdb_function_get_init_data)(duckdb_function_info info);

static void *_duckdb_function_get_init_data(__duckdb_function_get_init_data f, duckdb_function_info info) {
	return f(info);
}

typedef void *(*__duckdb_function_get_local_init_data)(duckdb_function_info info);

static void *_duckdb_function_get_local_init_data(__duckdb_function_get_local_init_data f, duckdb_function_info info) {
	return f(info);
}

typedef void (*__duckdb_function_set_error)(duckdb_function_info info, const char *error);

static void _duckdb_function_set_error(__duckdb_function_set_error f, duckdb_function_info info, const char *error) {
	return f(info, error);
}

typedef void (*__duckdb_add_replacement_scan)(duckdb_database db, duckdb_replacement_callback_t replacement,
                                              void *extra_data, duckdb_delete_callback_t delete_callback);

static void _duckdb_add_replacement_scan(__duckdb_add_replacement_scan f, duckdb_database db,
                                         duckdb_replacement_callback_t replacement, void *extra_data,
                                         duckdb_delete_callback_t delete_callback) {
	return f(db, replacement, extra_data, delete_callback);
}

typedef void (*__duckdb_replacement_scan_set_function_name)(duckdb_replacement_scan_info info,
                                                            const char *function_name);

static void _duckdb_replacement_scan_set_function_name(__duckdb_replacement_scan_set_function_name f,
                                                       duckdb_replacement_scan_info info, const char *function_name) {
	return f(info, function_name);
}

typedef void (*__duckdb_replacement_scan_add_parameter)(duckdb_replacement_scan_info info, duckdb_value parameter);

static void _duckdb_replacement_scan_add_parameter(__duckdb_replacement_scan_add_parameter f,
                                                   duckdb_replacement_scan_info info, duckdb_value parameter) {
	return f(info, parameter);
}

typedef void (*__duckdb_replacement_scan_set_error)(duckdb_replacement_scan_info info, const char *error);

static void _duckdb_replacement_scan_set_error(__duckdb_replacement_scan_set_error f, duckdb_replacement_scan_info info,
                                               const char *error) {
	return f(info, error);
}

typedef duckdb_state (*__duckdb_appender_create)(duckdb_connection connection, const char *schema, const char *table,
                                                 duckdb_appender *out_appender);

static duckdb_state _duckdb_appender_create(__duckdb_appender_create f, duckdb_connection connection,
                                            const char *schema, const char *table, duckdb_appender *out_appender) {
	return f(connection, schema, table, out_appender);
}

typedef idx_t (*__duckdb_appender_column_count)(duckdb_appender appender);

static idx_t _duckdb_appender_column_count(__duckdb_appender_column_count f, duckdb_appender appender) {
	return f(appender);
}

typedef duckdb_logical_type (*__duckdb_appender_column_type)(duckdb_appender appender, idx_t col_idx);

static duckdb_logical_type _duckdb_appender_column_type(__duckdb_appender_column_type f, duckdb_appender appender,
                                                        idx_t col_idx) {
	return f(appender, col_idx);
}

typedef const char *(*__duckdb_appender_error)(duckdb_appender appender);

static const char *_duckdb_appender_error(__duckdb_appender_error f, duckdb_appender appender) {
	return f(appender);
}

typedef duckdb_state (*__duckdb_appender_flush)(duckdb_appender appender);

static duckdb_state _duckdb_appender_flush(__duckdb_appender_flush f, duckdb_appender appender) {
	return f(appender);
}

typedef duckdb_state (*__duckdb_appender_close)(duckdb_appender appender);

static duckdb_state _duckdb_appender_close(__duckdb_appender_close f, duckdb_appender appender) {
	return f(appender);
}

typedef duckdb_state (*__duckdb_appender_destroy)(duckdb_appender *appender);

static duckdb_state _duckdb_appender_destroy(__duckdb_appender_destroy f, duckdb_appender *appender) {
	return f(appender);
}

typedef duckdb_state (*__duckdb_appender_begin_row)(duckdb_appender appender);

static duckdb_state _duckdb_appender_begin_row(__duckdb_appender_begin_row f, duckdb_appender appender) {
	return f(appender);
}

typedef duckdb_state (*__duckdb_appender_end_row)(duckdb_appender appender);

static duckdb_state _duckdb_appender_end_row(__duckdb_appender_end_row f, duckdb_appender appender) {
	return f(appender);
}

typedef duckdb_state (*__duckdb_append_default)(duckdb_appender appender);

static duckdb_state _duckdb_append_default(__duckdb_append_default f, duckdb_appender appender) {
	return f(appender);
}

typedef duckdb_state (*__duckdb_append_bool)(duckdb_appender appender, bool value);

static duckdb_state _duckdb_append_bool(__duckdb_append_bool f, duckdb_appender appender, bool value) {
	return f(appender, value);
}

typedef duckdb_state (*__duckdb_append_int8)(duckdb_appender appender, int8_t value);

static duckdb_state _duckdb_append_int8(__duckdb_append_int8 f, duckdb_appender appender, int8_t value) {
	return f(appender, value);
}

typedef duckdb_state (*__duckdb_append_int16)(duckdb_appender appender, int16_t value);

static duckdb_state _duckdb_append_int16(__duckdb_append_int16 f, duckdb_appender appender, int16_t value) {
	return f(appender, value);
}

typedef duckdb_state (*__duckdb_append_int32)(duckdb_appender appender, int32_t value);

static duckdb_state _duckdb_append_int32(__duckdb_append_int32 f, duckdb_appender appender, int32_t value) {
	return f(appender, value);
}

typedef duckdb_state (*__duckdb_append_int64)(duckdb_appender appender, int64_t value);

static duckdb_state _duckdb_append_int64(__duckdb_append_int64 f, duckdb_appender appender, int64_t value) {
	return f(appender, value);
}

typedef duckdb_state (*__duckdb_append_hugeint)(duckdb_appender appender, duckdb_hugeint value);

static duckdb_state _duckdb_append_hugeint(__duckdb_append_hugeint f, duckdb_appender appender, duckdb_hugeint value) {
	return f(appender, value);
}

typedef duckdb_state (*__duckdb_append_uint8)(duckdb_appender appender, uint8_t value);

static duckdb_state _duckdb_append_uint8(__duckdb_append_uint8 f, duckdb_appender appender, uint8_t value) {
	return f(appender, value);
}

typedef duckdb_state (*__duckdb_append_uint16)(duckdb_appender appender, uint16_t value);

static duckdb_state _duckdb_append_uint16(__duckdb_append_uint16 f, duckdb_appender appender, uint16_t value) {
	return f(appender, value);
}

typedef duckdb_state (*__duckdb_append_uint32)(duckdb_appender appender, uint32_t value);

static duckdb_state _duckdb_append_uint32(__duckdb_append_uint32 f, duckdb_appender appender, uint32_t value) {
	return f(appender, value);
}

typedef duckdb_state (*__duckdb_append_uint64)(duckdb_appender appender, uint64_t value);

static duckdb_state _duckdb_append_uint64(__duckdb_append_uint64 f, duckdb_appender appender, uint64_t value) {
	return f(appender, value);
}

typedef duckdb_state (*__duckdb_append_uhugeint)(duckdb_appender appender, duckdb_uhugeint value);

static duckdb_state _duckdb_append_uhugeint(__duckdb_append_uhugeint f, duckdb_appender appender,
                                            duckdb_uhugeint value) {
	return f(appender, value);
}

typedef duckdb_state (*__duckdb_append_float)(duckdb_appender appender, float value);

static duckdb_state _duckdb_append_float(__duckdb_append_float f, duckdb_appender appender, float value) {
	return f(appender, value);
}

typedef duckdb_state (*__duckdb_append_double)(duckdb_appender appender, double value);

static duckdb_state _duckdb_append_double(__duckdb_append_double f, duckdb_appender appender, double value) {
	return f(appender, value);
}

typedef duckdb_state (*__duckdb_append_date)(duckdb_appender appender, duckdb_date value);

static duckdb_state _duckdb_append_date(__duckdb_append_date f, duckdb_appender appender, duckdb_date value) {
	return f(appender, value);
}

typedef duckdb_state (*__duckdb_append_time)(duckdb_appender appender, duckdb_time value);

static duckdb_state _duckdb_append_time(__duckdb_append_time f, duckdb_appender appender, duckdb_time value) {
	return f(appender, value);
}

typedef duckdb_state (*__duckdb_append_timestamp)(duckdb_appender appender, duckdb_timestamp value);

static duckdb_state _duckdb_append_timestamp(__duckdb_append_timestamp f, duckdb_appender appender,
                                             duckdb_timestamp value) {
	return f(appender, value);
}

typedef duckdb_state (*__duckdb_append_interval)(duckdb_appender appender, duckdb_interval value);

static duckdb_state _duckdb_append_interval(__duckdb_append_interval f, duckdb_appender appender,
                                            duckdb_interval value) {
	return f(appender, value);
}

typedef duckdb_state (*__duckdb_append_varchar)(duckdb_appender appender, const char *val);

static duckdb_state _duckdb_append_varchar(__duckdb_append_varchar f, duckdb_appender appender, const char *val) {
	return f(appender, val);
}

typedef duckdb_state (*__duckdb_append_varchar_length)(duckdb_appender appender, const char *val, idx_t length);

static duckdb_state _duckdb_append_varchar_length(__duckdb_append_varchar_length f, duckdb_appender appender,
                                                  const char *val, idx_t length) {
	return f(appender, val, length);
}

typedef duckdb_state (*__duckdb_append_blob)(duckdb_appender appender, const void *data, idx_t length);

static duckdb_state _duckdb_append_blob(__duckdb_append_blob f, duckdb_appender appender, const void *data,
                                        idx_t length) {
	return f(appender, data, length);
}

typedef duckdb_state (*__duckdb_append_null)(duckdb_appender appender);

static duckdb_state _duckdb_append_null(__duckdb_append_null f, duckdb_appender appender) {
	return f(appender);
}

typedef duckdb_state (*__duckdb_append_data_chunk)(duckdb_appender appender, duckdb_data_chunk chunk);

static duckdb_state _duckdb_append_data_chunk(__duckdb_append_data_chunk f, duckdb_appender appender,
                                              duckdb_data_chunk chunk) {
	return f(appender, chunk);
}

typedef void (*__duckdb_execute_tasks)(duckdb_database database, idx_t max_tasks);

static void _duckdb_execute_tasks(__duckdb_execute_tasks f, duckdb_database database, idx_t max_tasks) {
	return f(database, max_tasks);
}

typedef duckdb_task_state (*__duckdb_create_task_state)(duckdb_database database);

static duckdb_task_state _duckdb_create_task_state(__duckdb_create_task_state f, duckdb_database database) {
	return f(database);
}

typedef void (*__duckdb_execute_tasks_state)(duckdb_task_state state);

static void _duckdb_execute_tasks_state(__duckdb_execute_tasks_state f, duckdb_task_state state) {
	return f(state);
}

typedef idx_t (*__duckdb_execute_n_tasks_state)(duckdb_task_state state, idx_t max_tasks);

static idx_t _duckdb_execute_n_tasks_state(__duckdb_execute_n_tasks_state f, duckdb_task_state state, idx_t max_tasks) {
	return f(state, max_tasks);
}

typedef void (*__duckdb_finish_execution)(duckdb_task_state state);

static void _duckdb_finish_execution(__duckdb_finish_execution f, duckdb_task_state state) {
	return f(state);
}

typedef bool (*__duckdb_task_state_is_finished)(duckdb_task_state state);

static bool _duckdb_task_state_is_finished(__duckdb_task_state_is_finished f, duckdb_task_state state) {
	return f(state);
}

typedef void (*__duckdb_destroy_task_state)(duckdb_task_state state);

static void _duckdb_destroy_task_state(__duckdb_destroy_task_state f, duckdb_task_state state) {
	return f(state);
}

typedef bool (*__duckdb_execution_is_finished)(duckdb_connection con);

static bool _duckdb_execution_is_finished(__duckdb_execution_is_finished f, duckdb_connection con) {
	return f(con);
}

typedef duckdb_profiling_info (*__duckdb_get_profiling_info)(duckdb_connection connection);

static duckdb_profiling_info _duckdb_get_profiling_info(__duckdb_get_profiling_info f, duckdb_connection connection) {
	return f(connection);
}

typedef duckdb_value (*__duckdb_profiling_info_get_value)(duckdb_profiling_info info, const char *key);

static duckdb_value _duckdb_profiling_info_get_value(__duckdb_profiling_info_get_value f, duckdb_profiling_info info,
                                                     const char *key) {
	return f(info, key);
}

typedef idx_t (*__duckdb_profiling_info_get_child_count)(duckdb_profiling_info info);

static idx_t _duckdb_profiling_info_get_child_count(__duckdb_profiling_info_get_child_count f,
                                                    duckdb_profiling_info info) {
	return f(info);
}

typedef duckdb_profiling_info (*__duckdb_profiling_info_get_child)(duckdb_profiling_info info, idx_t index);

static duckdb_profiling_info _duckdb_profiling_info_get_child(__duckdb_profiling_info_get_child f,
                                                              duckdb_profiling_info info, idx_t index) {
	return f(info, index);
}

typedef duckdb_value (*__duckdb_profiling_info_get_metrics)(duckdb_profiling_info info);

static duckdb_value _duckdb_profiling_info_get_metrics(__duckdb_profiling_info_get_metrics f,
                                                       duckdb_profiling_info info) {
	return f(info);
}

typedef void (*__duckdb_scalar_function_set_varargs)(duckdb_scalar_function scalar_function, duckdb_logical_type type);

static void _duckdb_scalar_function_set_varargs(__duckdb_scalar_function_set_varargs f,
                                                duckdb_scalar_function scalar_function, duckdb_logical_type type) {
	return f(scalar_function, type);
}

typedef void (*__duckdb_scalar_function_set_special_handling)(duckdb_scalar_function scalar_function);

static void _duckdb_scalar_function_set_special_handling(__duckdb_scalar_function_set_special_handling f,
                                                         duckdb_scalar_function scalar_function) {
	return f(scalar_function);
}

typedef void (*__duckdb_scalar_function_set_volatile)(duckdb_scalar_function scalar_function);

static void _duckdb_scalar_function_set_volatile(__duckdb_scalar_function_set_volatile f,
                                                 duckdb_scalar_function scalar_function) {
	return f(scalar_function);
}

typedef void *(*__duckdb_scalar_function_get_extra_info)(duckdb_function_info info);

static void *_duckdb_scalar_function_get_extra_info(__duckdb_scalar_function_get_extra_info f,
                                                    duckdb_function_info info) {
	return f(info);
}

typedef void (*__duckdb_scalar_function_set_error)(duckdb_function_info info, const char *error);

static void _duckdb_scalar_function_set_error(__duckdb_scalar_function_set_error f, duckdb_function_info info,
                                              const char *error) {
	return f(info, error);
}

typedef duckdb_state (*__duckdb_table_description_create)(duckdb_connection connection, const char *schema,
                                                          const char *table, duckdb_table_description *out);

static duckdb_state _duckdb_table_description_create(__duckdb_table_description_create f, duckdb_connection connection,
                                                     const char *schema, const char *table,
                                                     duckdb_table_description *out) {
	return f(connection, schema, table, out);
}

typedef void (*__duckdb_table_description_destroy)(duckdb_table_description *table_description);

static void _duckdb_table_description_destroy(__duckdb_table_description_destroy f,
                                              duckdb_table_description *table_description) {
	return f(table_description);
}

typedef const char *(*__duckdb_table_description_error)(duckdb_table_description table_description);

static const char *_duckdb_table_description_error(__duckdb_table_description_error f,
                                                   duckdb_table_description table_description) {
	return f(table_description);
}

typedef duckdb_error_type (*__duckdb_result_error_type)(duckdb_result *result);

static duckdb_error_type _duckdb_result_error_type(__duckdb_result_error_type f, duckdb_result *result) {
	return f(result);
}

typedef uint32_t (*__duckdb_string_t_length)(duckdb_string_t string);

static uint32_t _duckdb_string_t_length(__duckdb_string_t_length f, duckdb_string_t string) {
	return f(string);
}

typedef const char *(*__duckdb_string_t_data)(duckdb_string_t *string);

static const char *_duckdb_string_t_data(__duckdb_string_t_data f, duckdb_string_t *string) {
	return f(string);
}

typedef duckdb_value (*__duckdb_create_bool)(bool input);

static duckdb_value _duckdb_create_bool(__duckdb_create_bool f, bool input) {
	return f(input);
}

typedef duckdb_value (*__duckdb_create_int8)(int8_t input);

static duckdb_value _duckdb_create_int8(__duckdb_create_int8 f, int8_t input) {
	return f(input);
}

typedef duckdb_value (*__duckdb_create_uint8)(uint8_t input);

static duckdb_value _duckdb_create_uint8(__duckdb_create_uint8 f, uint8_t input) {
	return f(input);
}

typedef duckdb_value (*__duckdb_create_int16)(int16_t input);

static duckdb_value _duckdb_create_int16(__duckdb_create_int16 f, int16_t input) {
	return f(input);
}

typedef duckdb_value (*__duckdb_create_uint16)(uint16_t input);

static duckdb_value _duckdb_create_uint16(__duckdb_create_uint16 f, uint16_t input) {
	return f(input);
}

typedef duckdb_value (*__duckdb_create_int32)(int32_t input);

static duckdb_value _duckdb_create_int32(__duckdb_create_int32 f, int32_t input) {
	return f(input);
}

typedef duckdb_value (*__duckdb_create_uint32)(uint32_t input);

static duckdb_value _duckdb_create_uint32(__duckdb_create_uint32 f, uint32_t input) {
	return f(input);
}

typedef duckdb_value (*__duckdb_create_uint64)(uint64_t input);

static duckdb_value _duckdb_create_uint64(__duckdb_create_uint64 f, uint64_t input) {
	return f(input);
}

typedef duckdb_value (*__duckdb_create_hugeint)(duckdb_hugeint input);

static duckdb_value _duckdb_create_hugeint(__duckdb_create_hugeint f, duckdb_hugeint input) {
	return f(input);
}

typedef duckdb_value (*__duckdb_create_uhugeint)(duckdb_uhugeint input);

static duckdb_value _duckdb_create_uhugeint(__duckdb_create_uhugeint f, duckdb_uhugeint input) {
	return f(input);
}

typedef duckdb_value (*__duckdb_create_float)(float input);

static duckdb_value _duckdb_create_float(__duckdb_create_float f, float input) {
	return f(input);
}

typedef duckdb_value (*__duckdb_create_double)(double input);

static duckdb_value _duckdb_create_double(__duckdb_create_double f, double input) {
	return f(input);
}

typedef duckdb_value (*__duckdb_create_date)(duckdb_date input);

static duckdb_value _duckdb_create_date(__duckdb_create_date f, duckdb_date input) {
	return f(input);
}

typedef duckdb_value (*__duckdb_create_time)(duckdb_time input);

static duckdb_value _duckdb_create_time(__duckdb_create_time f, duckdb_time input) {
	return f(input);
}

typedef duckdb_value (*__duckdb_create_time_tz_value)(duckdb_time_tz value);

static duckdb_value _duckdb_create_time_tz_value(__duckdb_create_time_tz_value f, duckdb_time_tz value) {
	return f(value);
}

typedef duckdb_value (*__duckdb_create_timestamp)(duckdb_timestamp input);

static duckdb_value _duckdb_create_timestamp(__duckdb_create_timestamp f, duckdb_timestamp input) {
	return f(input);
}

typedef duckdb_value (*__duckdb_create_interval)(duckdb_interval input);

static duckdb_value _duckdb_create_interval(__duckdb_create_interval f, duckdb_interval input) {
	return f(input);
}

typedef duckdb_value (*__duckdb_create_blob)(const uint8_t *data, idx_t length);

static duckdb_value _duckdb_create_blob(__duckdb_create_blob f, const uint8_t *data, idx_t length) {
	return f(data, length);
}

typedef bool (*__duckdb_get_bool)(duckdb_value val);

static bool _duckdb_get_bool(__duckdb_get_bool f, duckdb_value val) {
	return f(val);
}

typedef int8_t (*__duckdb_get_int8)(duckdb_value val);

static int8_t _duckdb_get_int8(__duckdb_get_int8 f, duckdb_value val) {
	return f(val);
}

typedef uint8_t (*__duckdb_get_uint8)(duckdb_value val);

static uint8_t _duckdb_get_uint8(__duckdb_get_uint8 f, duckdb_value val) {
	return f(val);
}

typedef int16_t (*__duckdb_get_int16)(duckdb_value val);

static int16_t _duckdb_get_int16(__duckdb_get_int16 f, duckdb_value val) {
	return f(val);
}

typedef uint16_t (*__duckdb_get_uint16)(duckdb_value val);

static uint16_t _duckdb_get_uint16(__duckdb_get_uint16 f, duckdb_value val) {
	return f(val);
}

typedef int32_t (*__duckdb_get_int32)(duckdb_value val);

static int32_t _duckdb_get_int32(__duckdb_get_int32 f, duckdb_value val) {
	return f(val);
}

typedef uint32_t (*__duckdb_get_uint32)(duckdb_value val);

static uint32_t _duckdb_get_uint32(__duckdb_get_uint32 f, duckdb_value val) {
	return f(val);
}

typedef uint64_t (*__duckdb_get_uint64)(duckdb_value val);

static uint64_t _duckdb_get_uint64(__duckdb_get_uint64 f, duckdb_value val) {
	return f(val);
}

typedef duckdb_hugeint (*__duckdb_get_hugeint)(duckdb_value val);

static duckdb_hugeint _duckdb_get_hugeint(__duckdb_get_hugeint f, duckdb_value val) {
	return f(val);
}

typedef duckdb_uhugeint (*__duckdb_get_uhugeint)(duckdb_value val);

static duckdb_uhugeint _duckdb_get_uhugeint(__duckdb_get_uhugeint f, duckdb_value val) {
	return f(val);
}

typedef float (*__duckdb_get_float)(duckdb_value val);

static float _duckdb_get_float(__duckdb_get_float f, duckdb_value val) {
	return f(val);
}

typedef double (*__duckdb_get_double)(duckdb_value val);

static double _duckdb_get_double(__duckdb_get_double f, duckdb_value val) {
	return f(val);
}

typedef duckdb_date (*__duckdb_get_date)(duckdb_value val);

static duckdb_date _duckdb_get_date(__duckdb_get_date f, duckdb_value val) {
	return f(val);
}

typedef duckdb_time (*__duckdb_get_time)(duckdb_value val);

static duckdb_time _duckdb_get_time(__duckdb_get_time f, duckdb_value val) {
	return f(val);
}

typedef duckdb_time_tz (*__duckdb_get_time_tz)(duckdb_value val);

static duckdb_time_tz _duckdb_get_time_tz(__duckdb_get_time_tz f, duckdb_value val) {
	return f(val);
}

typedef duckdb_timestamp (*__duckdb_get_timestamp)(duckdb_value val);

static duckdb_timestamp _duckdb_get_timestamp(__duckdb_get_timestamp f, duckdb_value val) {
	return f(val);
}

typedef duckdb_interval (*__duckdb_get_interval)(duckdb_value val);

static duckdb_interval _duckdb_get_interval(__duckdb_get_interval f, duckdb_value val) {
	return f(val);
}

typedef duckdb_logical_type (*__duckdb_get_value_type)(duckdb_value val);

static duckdb_logical_type _duckdb_get_value_type(__duckdb_get_value_type f, duckdb_value val) {
	return f(val);
}

typedef duckdb_blob (*__duckdb_get_blob)(duckdb_value val);

static duckdb_blob _duckdb_get_blob(__duckdb_get_blob f, duckdb_value val) {
	return f(val);
}

typedef duckdb_scalar_function_set (*__duckdb_create_scalar_function_set)(const char *name);

static duckdb_scalar_function_set _duckdb_create_scalar_function_set(__duckdb_create_scalar_function_set f,
                                                                     const char *name) {
	return f(name);
}

typedef void (*__duckdb_destroy_scalar_function_set)(duckdb_scalar_function_set *scalar_function_set);

static void _duckdb_destroy_scalar_function_set(__duckdb_destroy_scalar_function_set f,
                                                duckdb_scalar_function_set *scalar_function_set) {
	return f(scalar_function_set);
}

typedef duckdb_state (*__duckdb_add_scalar_function_to_set)(duckdb_scalar_function_set set,
                                                            duckdb_scalar_function function);

static duckdb_state _duckdb_add_scalar_function_to_set(__duckdb_add_scalar_function_to_set f,
                                                       duckdb_scalar_function_set set,
                                                       duckdb_scalar_function function) {
	return f(set, function);
}

typedef duckdb_state (*__duckdb_register_scalar_function_set)(duckdb_connection con, duckdb_scalar_function_set set);

static duckdb_state _duckdb_register_scalar_function_set(__duckdb_register_scalar_function_set f, duckdb_connection con,
                                                         duckdb_scalar_function_set set) {
	return f(con, set);
}

typedef duckdb_aggregate_function_set (*__duckdb_create_aggregate_function_set)(const char *name);

static duckdb_aggregate_function_set _duckdb_create_aggregate_function_set(__duckdb_create_aggregate_function_set f,
                                                                           const char *name) {
	return f(name);
}

typedef void (*__duckdb_destroy_aggregate_function_set)(duckdb_aggregate_function_set *aggregate_function_set);

static void _duckdb_destroy_aggregate_function_set(__duckdb_destroy_aggregate_function_set f,
                                                   duckdb_aggregate_function_set *aggregate_function_set) {
	return f(aggregate_function_set);
}

typedef duckdb_state (*__duckdb_add_aggregate_function_to_set)(duckdb_aggregate_function_set set,
                                                               duckdb_aggregate_function function);

static duckdb_state _duckdb_add_aggregate_function_to_set(__duckdb_add_aggregate_function_to_set f,
                                                          duckdb_aggregate_function_set set,
                                                          duckdb_aggregate_function function) {
	return f(set, function);
}

typedef duckdb_state (*__duckdb_register_aggregate_function_set)(duckdb_connection con,
                                                                 duckdb_aggregate_function_set set);

static duckdb_state _duckdb_register_aggregate_function_set(__duckdb_register_aggregate_function_set f,
                                                            duckdb_connection con, duckdb_aggregate_function_set set) {
	return f(con, set);
}

typedef idx_t (*__duckdb_get_map_size)(duckdb_value value);

static idx_t _duckdb_get_map_size(__duckdb_get_map_size f, duckdb_value value) {
	return f(value);
}

typedef duckdb_value (*__duckdb_get_map_key)(duckdb_value value, idx_t index);

static duckdb_value _duckdb_get_map_key(__duckdb_get_map_key f, duckdb_value value, idx_t index) {
	return f(value, index);
}

typedef duckdb_value (*__duckdb_get_map_value)(duckdb_value value, idx_t index);

static duckdb_value _duckdb_get_map_value(__duckdb_get_map_value f, duckdb_value value, idx_t index) {
	return f(value, index);
}

typedef duckdb_aggregate_function (*__duckdb_create_aggregate_function)();

static duckdb_aggregate_function _duckdb_create_aggregate_function(__duckdb_create_aggregate_function f) {
	return f();
}

typedef void (*__duckdb_destroy_aggregate_function)(duckdb_aggregate_function *aggregate_function);

static void _duckdb_destroy_aggregate_function(__duckdb_destroy_aggregate_function f,
                                               duckdb_aggregate_function *aggregate_function) {
	return f(aggregate_function);
}

typedef void (*__duckdb_aggregate_function_set_name)(duckdb_aggregate_function aggregate_function, const char *name);

static void _duckdb_aggregate_function_set_name(__duckdb_aggregate_function_set_name f,
                                                duckdb_aggregate_function aggregate_function, const char *name) {
	return f(aggregate_function, name);
}

typedef void (*__duckdb_aggregate_function_add_parameter)(duckdb_aggregate_function aggregate_function,
                                                          duckdb_logical_type type);

static void _duckdb_aggregate_function_add_parameter(__duckdb_aggregate_function_add_parameter f,
                                                     duckdb_aggregate_function aggregate_function,
                                                     duckdb_logical_type type) {
	return f(aggregate_function, type);
}

typedef void (*__duckdb_aggregate_function_set_return_type)(duckdb_aggregate_function aggregate_function,
                                                            duckdb_logical_type type);

static void _duckdb_aggregate_function_set_return_type(__duckdb_aggregate_function_set_return_type f,
                                                       duckdb_aggregate_function aggregate_function,
                                                       duckdb_logical_type type) {
	return f(aggregate_function, type);
}

typedef void (*__duckdb_aggregate_function_set_functions)(duckdb_aggregate_function aggregate_function,
                                                          duckdb_aggregate_state_size state_size,
                                                          duckdb_aggregate_init_t state_init,
                                                          duckdb_aggregate_update_t update,
                                                          duckdb_aggregate_combine_t combine,
                                                          duckdb_aggregate_finalize_t finalize);

static void _duckdb_aggregate_function_set_functions(
    __duckdb_aggregate_function_set_functions f, duckdb_aggregate_function aggregate_function,
    duckdb_aggregate_state_size state_size, duckdb_aggregate_init_t state_init, duckdb_aggregate_update_t update,
    duckdb_aggregate_combine_t combine, duckdb_aggregate_finalize_t finalize) {
	return f(aggregate_function, state_size, state_init, update, combine, finalize);
}

typedef void (*__duckdb_aggregate_function_set_destructor)(duckdb_aggregate_function aggregate_function,
                                                           duckdb_aggregate_destroy_t destroy);

static void _duckdb_aggregate_function_set_destructor(__duckdb_aggregate_function_set_destructor f,
                                                      duckdb_aggregate_function aggregate_function,
                                                      duckdb_aggregate_destroy_t destroy) {
	return f(aggregate_function, destroy);
}

typedef duckdb_state (*__duckdb_register_aggregate_function)(duckdb_connection con,
                                                             duckdb_aggregate_function aggregate_function);

static duckdb_state _duckdb_register_aggregate_function(__duckdb_register_aggregate_function f, duckdb_connection con,
                                                        duckdb_aggregate_function aggregate_function) {
	return f(con, aggregate_function);
}

typedef void (*__duckdb_aggregate_function_set_special_handling)(duckdb_aggregate_function aggregate_function);

static void _duckdb_aggregate_function_set_special_handling(__duckdb_aggregate_function_set_special_handling f,
                                                            duckdb_aggregate_function aggregate_function) {
	return f(aggregate_function);
}

typedef void (*__duckdb_aggregate_function_set_extra_info)(duckdb_aggregate_function aggregate_function,
                                                           void *extra_info, duckdb_delete_callback_t destroy);

static void _duckdb_aggregate_function_set_extra_info(__duckdb_aggregate_function_set_extra_info f,
                                                      duckdb_aggregate_function aggregate_function, void *extra_info,
                                                      duckdb_delete_callback_t destroy) {
	return f(aggregate_function, extra_info, destroy);
}

typedef void *(*__duckdb_aggregate_function_get_extra_info)(duckdb_function_info info);

static void *_duckdb_aggregate_function_get_extra_info(__duckdb_aggregate_function_get_extra_info f,
                                                       duckdb_function_info info) {
	return f(info);
}

typedef void (*__duckdb_aggregate_function_set_error)(duckdb_function_info info, const char *error);

static void _duckdb_aggregate_function_set_error(__duckdb_aggregate_function_set_error f, duckdb_function_info info,
                                                 const char *error) {
	return f(info, error);
}

typedef void (*__duckdb_logical_type_set_alias)(duckdb_logical_type type, const char *alias);

static void _duckdb_logical_type_set_alias(__duckdb_logical_type_set_alias f, duckdb_logical_type type,
                                           const char *alias) {
	return f(type, alias);
}

typedef duckdb_state (*__duckdb_register_logical_type)(duckdb_connection con, duckdb_logical_type type,
                                                       duckdb_create_type_info info);

static duckdb_state _duckdb_register_logical_type(__duckdb_register_logical_type f, duckdb_connection con,
                                                  duckdb_logical_type type, duckdb_create_type_info info) {
	return f(con, type, info);
}

typedef duckdb_cast_function (*__duckdb_create_cast_function)();

static duckdb_cast_function _duckdb_create_cast_function(__duckdb_create_cast_function f) {
	return f();
}

typedef void (*__duckdb_cast_function_set_source_type)(duckdb_cast_function cast_function,
                                                       duckdb_logical_type source_type);

static void _duckdb_cast_function_set_source_type(__duckdb_cast_function_set_source_type f,
                                                  duckdb_cast_function cast_function, duckdb_logical_type source_type) {
	return f(cast_function, source_type);
}

typedef void (*__duckdb_cast_function_set_target_type)(duckdb_cast_function cast_function,
                                                       duckdb_logical_type target_type);

static void _duckdb_cast_function_set_target_type(__duckdb_cast_function_set_target_type f,
                                                  duckdb_cast_function cast_function, duckdb_logical_type target_type) {
	return f(cast_function, target_type);
}

typedef void (*__duckdb_cast_function_set_implicit_cast_cost)(duckdb_cast_function cast_function, int64_t cost);

static void _duckdb_cast_function_set_implicit_cast_cost(__duckdb_cast_function_set_implicit_cast_cost f,
                                                         duckdb_cast_function cast_function, int64_t cost) {
	return f(cast_function, cost);
}

typedef void (*__duckdb_cast_function_set_function)(duckdb_cast_function cast_function,
                                                    duckdb_cast_function_t function);

static void _duckdb_cast_function_set_function(__duckdb_cast_function_set_function f,
                                               duckdb_cast_function cast_function, duckdb_cast_function_t function) {
	return f(cast_function, function);
}

typedef void (*__duckdb_cast_function_set_extra_info)(duckdb_cast_function cast_function, void *extra_info,
                                                      duckdb_delete_callback_t destroy);

static void _duckdb_cast_function_set_extra_info(__duckdb_cast_function_set_extra_info f,
                                                 duckdb_cast_function cast_function, void *extra_info,
                                                 duckdb_delete_callback_t destroy) {
	return f(cast_function, extra_info, destroy);
}

typedef void *(*__duckdb_cast_function_get_extra_info)(duckdb_function_info info);

static void *_duckdb_cast_function_get_extra_info(__duckdb_cast_function_get_extra_info f, duckdb_function_info info) {
	return f(info);
}

typedef duckdb_cast_mode (*__duckdb_cast_function_get_cast_mode)(duckdb_function_info info);

static duckdb_cast_mode _duckdb_cast_function_get_cast_mode(__duckdb_cast_function_get_cast_mode f,
                                                            duckdb_function_info info) {
	return f(info);
}

typedef void (*__duckdb_cast_function_set_error)(duckdb_function_info info, const char *error);

static void _duckdb_cast_function_set_error(__duckdb_cast_function_set_error f, duckdb_function_info info,
                                            const char *error) {
	return f(info, error);
}

typedef void (*__duckdb_cast_function_set_row_error)(duckdb_function_info info, const char *error, idx_t row,
                                                     duckdb_vector output);

static void _duckdb_cast_function_set_row_error(__duckdb_cast_function_set_row_error f, duckdb_function_info info,
                                                const char *error, idx_t row, duckdb_vector output) {
	return f(info, error, row, output);
}

typedef duckdb_state (*__duckdb_register_cast_function)(duckdb_connection con, duckdb_cast_function cast_function);

static duckdb_state _duckdb_register_cast_function(__duckdb_register_cast_function f, duckdb_connection con,
                                                   duckdb_cast_function cast_function) {
	return f(con, cast_function);
}

typedef void (*__duckdb_destroy_cast_function)(duckdb_cast_function *cast_function);

static void _duckdb_destroy_cast_function(__duckdb_destroy_cast_function f, duckdb_cast_function *cast_function) {
	return f(cast_function);
}

typedef idx_t (*__duckdb_row_count)(duckdb_result *result);

static idx_t _duckdb_row_count(__duckdb_row_count f, duckdb_result *result) {
	return f(result);
}

typedef void *(*__duckdb_column_data)(duckdb_result *result, idx_t col);

static void *_duckdb_column_data(__duckdb_column_data f, duckdb_result *result, idx_t col) {
	return f(result, col);
}

typedef bool *(*__duckdb_nullmask_data)(duckdb_result *result, idx_t col);

static bool *_duckdb_nullmask_data(__duckdb_nullmask_data f, duckdb_result *result, idx_t col) {
	return f(result, col);
}

typedef duckdb_data_chunk (*__duckdb_result_get_chunk)(duckdb_result result, idx_t chunk_index);

static duckdb_data_chunk _duckdb_result_get_chunk(__duckdb_result_get_chunk f, duckdb_result result,
                                                  idx_t chunk_index) {
	return f(result, chunk_index);
}

typedef bool (*__duckdb_result_is_streaming)(duckdb_result result);

static bool _duckdb_result_is_streaming(__duckdb_result_is_streaming f, duckdb_result result) {
	return f(result);
}

typedef idx_t (*__duckdb_result_chunk_count)(duckdb_result result);

static idx_t _duckdb_result_chunk_count(__duckdb_result_chunk_count f, duckdb_result result) {
	return f(result);
}

typedef duckdb_result_type (*__duckdb_result_return_type)(duckdb_result result);

static duckdb_result_type _duckdb_result_return_type(__duckdb_result_return_type f, duckdb_result result) {
	return f(result);
}

typedef bool (*__duckdb_value_boolean)(duckdb_result *result, idx_t col, idx_t row);

static bool _duckdb_value_boolean(__duckdb_value_boolean f, duckdb_result *result, idx_t col, idx_t row) {
	return f(result, col, row);
}

typedef int8_t (*__duckdb_value_int8)(duckdb_result *result, idx_t col, idx_t row);

static int8_t _duckdb_value_int8(__duckdb_value_int8 f, duckdb_result *result, idx_t col, idx_t row) {
	return f(result, col, row);
}

typedef int16_t (*__duckdb_value_int16)(duckdb_result *result, idx_t col, idx_t row);

static int16_t _duckdb_value_int16(__duckdb_value_int16 f, duckdb_result *result, idx_t col, idx_t row) {
	return f(result, col, row);
}

typedef int32_t (*__duckdb_value_int32)(duckdb_result *result, idx_t col, idx_t row);

static int32_t _duckdb_value_int32(__duckdb_value_int32 f, duckdb_result *result, idx_t col, idx_t row) {
	return f(result, col, row);
}

typedef int64_t (*__duckdb_value_int64)(duckdb_result *result, idx_t col, idx_t row);

static int64_t _duckdb_value_int64(__duckdb_value_int64 f, duckdb_result *result, idx_t col, idx_t row) {
	return f(result, col, row);
}

typedef duckdb_hugeint (*__duckdb_value_hugeint)(duckdb_result *result, idx_t col, idx_t row);

static duckdb_hugeint _duckdb_value_hugeint(__duckdb_value_hugeint f, duckdb_result *result, idx_t col, idx_t row) {
	return f(result, col, row);
}

typedef duckdb_uhugeint (*__duckdb_value_uhugeint)(duckdb_result *result, idx_t col, idx_t row);

static duckdb_uhugeint _duckdb_value_uhugeint(__duckdb_value_uhugeint f, duckdb_result *result, idx_t col, idx_t row) {
	return f(result, col, row);
}

typedef duckdb_decimal (*__duckdb_value_decimal)(duckdb_result *result, idx_t col, idx_t row);

static duckdb_decimal _duckdb_value_decimal(__duckdb_value_decimal f, duckdb_result *result, idx_t col, idx_t row) {
	return f(result, col, row);
}

typedef uint8_t (*__duckdb_value_uint8)(duckdb_result *result, idx_t col, idx_t row);

static uint8_t _duckdb_value_uint8(__duckdb_value_uint8 f, duckdb_result *result, idx_t col, idx_t row) {
	return f(result, col, row);
}

typedef uint16_t (*__duckdb_value_uint16)(duckdb_result *result, idx_t col, idx_t row);

static uint16_t _duckdb_value_uint16(__duckdb_value_uint16 f, duckdb_result *result, idx_t col, idx_t row) {
	return f(result, col, row);
}

typedef uint32_t (*__duckdb_value_uint32)(duckdb_result *result, idx_t col, idx_t row);

static uint32_t _duckdb_value_uint32(__duckdb_value_uint32 f, duckdb_result *result, idx_t col, idx_t row) {
	return f(result, col, row);
}

typedef uint64_t (*__duckdb_value_uint64)(duckdb_result *result, idx_t col, idx_t row);

static uint64_t _duckdb_value_uint64(__duckdb_value_uint64 f, duckdb_result *result, idx_t col, idx_t row) {
	return f(result, col, row);
}

typedef float (*__duckdb_value_float)(duckdb_result *result, idx_t col, idx_t row);

static float _duckdb_value_float(__duckdb_value_float f, duckdb_result *result, idx_t col, idx_t row) {
	return f(result, col, row);
}

typedef double (*__duckdb_value_double)(duckdb_result *result, idx_t col, idx_t row);

static double _duckdb_value_double(__duckdb_value_double f, duckdb_result *result, idx_t col, idx_t row) {
	return f(result, col, row);
}

typedef duckdb_date (*__duckdb_value_date)(duckdb_result *result, idx_t col, idx_t row);

static duckdb_date _duckdb_value_date(__duckdb_value_date f, duckdb_result *result, idx_t col, idx_t row) {
	return f(result, col, row);
}

typedef duckdb_time (*__duckdb_value_time)(duckdb_result *result, idx_t col, idx_t row);

static duckdb_time _duckdb_value_time(__duckdb_value_time f, duckdb_result *result, idx_t col, idx_t row) {
	return f(result, col, row);
}

typedef duckdb_timestamp (*__duckdb_value_timestamp)(duckdb_result *result, idx_t col, idx_t row);

static duckdb_timestamp _duckdb_value_timestamp(__duckdb_value_timestamp f, duckdb_result *result, idx_t col,
                                                idx_t row) {
	return f(result, col, row);
}

typedef duckdb_interval (*__duckdb_value_interval)(duckdb_result *result, idx_t col, idx_t row);

static duckdb_interval _duckdb_value_interval(__duckdb_value_interval f, duckdb_result *result, idx_t col, idx_t row) {
	return f(result, col, row);
}

typedef char *(*__duckdb_value_varchar)(duckdb_result *result, idx_t col, idx_t row);

static char *_duckdb_value_varchar(__duckdb_value_varchar f, duckdb_result *result, idx_t col, idx_t row) {
	return f(result, col, row);
}

typedef duckdb_string (*__duckdb_value_string)(duckdb_result *result, idx_t col, idx_t row);

static duckdb_string _duckdb_value_string(__duckdb_value_string f, duckdb_result *result, idx_t col, idx_t row) {
	return f(result, col, row);
}

typedef char *(*__duckdb_value_varchar_internal)(duckdb_result *result, idx_t col, idx_t row);

static char *_duckdb_value_varchar_internal(__duckdb_value_varchar_internal f, duckdb_result *result, idx_t col,
                                            idx_t row) {
	return f(result, col, row);
}

typedef duckdb_string (*__duckdb_value_string_internal)(duckdb_result *result, idx_t col, idx_t row);

static duckdb_string _duckdb_value_string_internal(__duckdb_value_string_internal f, duckdb_result *result, idx_t col,
                                                   idx_t row) {
	return f(result, col, row);
}

typedef duckdb_blob (*__duckdb_value_blob)(duckdb_result *result, idx_t col, idx_t row);

static duckdb_blob _duckdb_value_blob(__duckdb_value_blob f, duckdb_result *result, idx_t col, idx_t row) {
	return f(result, col, row);
}

typedef bool (*__duckdb_value_is_null)(duckdb_result *result, idx_t col, idx_t row);

static bool _duckdb_value_is_null(__duckdb_value_is_null f, duckdb_result *result, idx_t col, idx_t row) {
	return f(result, col, row);
}

typedef duckdb_state (*__duckdb_execute_prepared_streaming)(duckdb_prepared_statement prepared_statement,
                                                            duckdb_result *out_result);

static duckdb_state _duckdb_execute_prepared_streaming(__duckdb_execute_prepared_streaming f,
                                                       duckdb_prepared_statement prepared_statement,
                                                       duckdb_result *out_result) {
	return f(prepared_statement, out_result);
}

typedef duckdb_state (*__duckdb_pending_prepared_streaming)(duckdb_prepared_statement prepared_statement,
                                                            duckdb_pending_result *out_result);

static duckdb_state _duckdb_pending_prepared_streaming(__duckdb_pending_prepared_streaming f,
                                                       duckdb_prepared_statement prepared_statement,
                                                       duckdb_pending_result *out_result) {
	return f(prepared_statement, out_result);
}

typedef duckdb_state (*__duckdb_column_has_default)(duckdb_table_description table_description, idx_t index, bool *out);

static duckdb_state _duckdb_column_has_default(__duckdb_column_has_default f,
                                               duckdb_table_description table_description, idx_t index, bool *out) {
	return f(table_description, index, out);
}

typedef duckdb_state (*__duckdb_query_arrow)(duckdb_connection connection, const char *query, duckdb_arrow *out_result);

static duckdb_state _duckdb_query_arrow(__duckdb_query_arrow f, duckdb_connection connection, const char *query,
                                        duckdb_arrow *out_result) {
	return f(connection, query, out_result);
}

typedef duckdb_state (*__duckdb_query_arrow_schema)(duckdb_arrow result, duckdb_arrow_schema *out_schema);

static duckdb_state _duckdb_query_arrow_schema(__duckdb_query_arrow_schema f, duckdb_arrow result,
                                               duckdb_arrow_schema *out_schema) {
	return f(result, out_schema);
}

typedef duckdb_state (*__duckdb_prepared_arrow_schema)(duckdb_prepared_statement prepared,
                                                       duckdb_arrow_schema *out_schema);

static duckdb_state _duckdb_prepared_arrow_schema(__duckdb_prepared_arrow_schema f, duckdb_prepared_statement prepared,
                                                  duckdb_arrow_schema *out_schema) {
	return f(prepared, out_schema);
}

typedef void (*__duckdb_result_arrow_array)(duckdb_result result, duckdb_data_chunk chunk,
                                            duckdb_arrow_array *out_array);

static void _duckdb_result_arrow_array(__duckdb_result_arrow_array f, duckdb_result result, duckdb_data_chunk chunk,
                                       duckdb_arrow_array *out_array) {
	return f(result, chunk, out_array);
}

typedef duckdb_state (*__duckdb_query_arrow_array)(duckdb_arrow result, duckdb_arrow_array *out_array);

static duckdb_state _duckdb_query_arrow_array(__duckdb_query_arrow_array f, duckdb_arrow result,
                                              duckdb_arrow_array *out_array) {
	return f(result, out_array);
}

typedef idx_t (*__duckdb_arrow_column_count)(duckdb_arrow result);

static idx_t _duckdb_arrow_column_count(__duckdb_arrow_column_count f, duckdb_arrow result) {
	return f(result);
}

typedef idx_t (*__duckdb_arrow_row_count)(duckdb_arrow result);

static idx_t _duckdb_arrow_row_count(__duckdb_arrow_row_count f, duckdb_arrow result) {
	return f(result);
}

typedef idx_t (*__duckdb_arrow_rows_changed)(duckdb_arrow result);

static idx_t _duckdb_arrow_rows_changed(__duckdb_arrow_rows_changed f, duckdb_arrow result) {
	return f(result);
}

typedef const char *(*__duckdb_query_arrow_error)(duckdb_arrow result);

static const char *_duckdb_query_arrow_error(__duckdb_query_arrow_error f, duckdb_arrow result) {
	return f(result);
}

typedef void (*__duckdb_destroy_arrow)(duckdb_arrow *result);

static void _duckdb_destroy_arrow(__duckdb_destroy_arrow f, duckdb_arrow *result) {
	return f(result);
}

typedef void (*__duckdb_destroy_arrow_stream)(duckdb_arrow_stream *stream_p);

static void _duckdb_destroy_arrow_stream(__duckdb_destroy_arrow_stream f, duckdb_arrow_stream *stream_p) {
	return f(stream_p);
}

typedef duckdb_state (*__duckdb_execute_prepared_arrow)(duckdb_prepared_statement prepared_statement,
                                                        duckdb_arrow *out_result);

static duckdb_state _duckdb_execute_prepared_arrow(__duckdb_execute_prepared_arrow f,
                                                   duckdb_prepared_statement prepared_statement,
                                                   duckdb_arrow *out_result) {
	return f(prepared_statement, out_result);
}

typedef duckdb_state (*__duckdb_arrow_scan)(duckdb_connection connection, const char *table_name,
                                            duckdb_arrow_stream arrow);

static duckdb_state _duckdb_arrow_scan(__duckdb_arrow_scan f, duckdb_connection connection, const char *table_name,
                                       duckdb_arrow_stream arrow) {
	return f(connection, table_name, arrow);
}

typedef duckdb_state (*__duckdb_arrow_array_scan)(duckdb_connection connection, const char *table_name,
                                                  duckdb_arrow_schema arrow_schema, duckdb_arrow_array arrow_array,
                                                  duckdb_arrow_stream *out_stream);

static duckdb_state _duckdb_arrow_array_scan(__duckdb_arrow_array_scan f, duckdb_connection connection,
                                             const char *table_name, duckdb_arrow_schema arrow_schema,
                                             duckdb_arrow_array arrow_array, duckdb_arrow_stream *out_stream) {
	return f(connection, table_name, arrow_schema, arrow_array, out_stream);
}

typedef duckdb_data_chunk (*__duckdb_stream_fetch_chunk)(duckdb_result result);

static duckdb_data_chunk _duckdb_stream_fetch_chunk(__duckdb_stream_fetch_chunk f, duckdb_result result) {
	return f(result);
}

//===--------------------------------------------------------------------===//
// Typedefs mapping functions to struct entries
//===--------------------------------------------------------------------===//
